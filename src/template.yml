# // Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# // SPDX-License-Identifier: Apache-2.0

AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: ADF CloudFormation Initial Base Stack for the Management Account in the us-east-1 region.

Metadata:
  AWS::ServerlessRepo::Application:
    Name: aws-deployment-framework
    Description: >-
      The AWS Deployment Framework (ADF) is an extensive and flexible framework to manage and
      deploy resources across multiple AWS accounts and regions based on AWS Organizations.
    Author: AWS ADF Builders Team
    SpdxLicenseId: Apache-2.0
    LicenseUrl: ../LICENSE.txt
    ReadmeUrl: ../docs/installation-guide.md
    Labels:
      ["adf", "aws-deployment-framework", "multi-account", "cicd", "devops"]
    HomePageUrl: https://github.com/awslabs/aws-deployment-framework
    SemanticVersion: 3.2.0
    SourceCodeUrl: https://github.com/awslabs/aws-deployment-framework

Mappings:
  Metadata:
    ADF:
      Version: 3.2.0

Parameters:
  CrossAccountAccessRoleName:
    Type: String
    Default: OrganizationAccountAccessRole
    AllowedPattern: "[a-zA-Z0-9_+=,.@\\-]+"

  MainNotificationEndpoint:
    Type: String
    Default: ""
    Description: >-
      Example -> jane@example.com. (Only required when installing ADF for the
      first time.)

  DeploymentAccountName:
    Type: String
    Default: ""
    AllowedPattern: "[\\s\\S]*"
    MinLength: 0
    MaxLength: 50
    Description: >-
      The name of the new or existing deployment account. (Only required when
      installing ADF for the first time.)

  DeploymentAccountEmailAddress:
    Type: String
    Default: ""
    Description: >-
      The email address for the new or existing deployment account. (Only required when
      installing ADF for the first time.)

  DeploymentAccountAlias:
    Type: String
    Default: ""
    AllowedPattern: "([a-z0-9](([a-z0-9]|-(?!-))*[a-z0-9])?)?"
    MinLength: 0
    MaxLength: 63
    Description: >-
      Example -> companyname-deployment (Must be globally unique. Only required when
      installing ADF for the first time.)

  DeploymentAccountId:
    Type: String
    AllowedPattern: "(\\d{12})?"
    Default: ""
    Description: >-
      Example -> 123456789012  (Only supported when installing ADF for the first time
      and you have an existing AWS Account that you wish to use as the deployment
      account. Leave blank otherwise.)

  DeploymentAccountMainRegion:
    Type: String
    AllowedPattern: "(us(-gov)?|ap|ca|eu|sa)-(central|(north|south)?(east|west)?)-\\d"
    MinLength: 6
    Description: "Example -> us-east-1, us-gov-west-1, eu-west-1"

  DeploymentAccountTargetRegions:
    Type: CommaDelimitedList
    Default: ""
    Description: >-
      (Optional) Example -> us-east-1, us-west-1, eu-west-3. (Only supported when
      installing ADF for the first time. If you would like to update this later,
      please look at the adfconfig.yml file in the aws-deployment-framework-bootstrap
      repository.)

  ProtectedOUs:
    Type: CommaDelimitedList
    Default: ""
    Description: >-
      (Optional) Example -> ou-123,ou-234 (Only supported when installing ADF for
      the first time. If you would like to update this later, please look at the
      adfconfig.yml file in the aws-deployment-framework-bootstrap repository.)

  LogLevel:
    Description: >-
      At what Log Level the ADF should operate, default is INFO.
      Valid options are: DEBUG, INFO, WARN, ERROR, and CRITICAL.
    Type: String
    Default: "INFO"
    AllowedValues:
      - DEBUG
      - INFO
      - WARN
      - ERROR
      - CRITICAL

Globals:
  Function:
    Architectures:
      - arm64
    CodeUri: lambda_codebase
    Runtime: python3.12
    Timeout: 300

Resources:
  BootstrapTemplatesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref "BootstrapTemplatesBucket"
      PolicyDocument:
        Statement:
          - Action:
              - s3:Get*
              - s3:PutReplicationConfiguration
              - s3:List*
            Effect: Allow
            Condition:
              StringEquals:
                aws:PrincipalOrgID: !GetAtt Organization.OrganizationId
            Resource:
              - !GetAtt BootstrapTemplatesBucket.Arn
              - !Sub "${BootstrapTemplatesBucket.Arn}/*"
            Principal:
              AWS: "*"
          - Action:
              - s3:PutObject*
            Effect: Allow
            Resource:
              - !GetAtt BootstrapTemplatesBucket.Arn
              - !Sub "${BootstrapTemplatesBucket.Arn}/*"
            Principal:
              AWS: !Ref AWS::AccountId

  BootstrapArtifactStorageBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AccessControl: BucketOwnerFullControl
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  BootstrapTemplatesBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AccessControl: BucketOwnerFullControl
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  ### Account processing begin
  AccountProcessingLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  AccountProcessingLambdaRolePolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: "Policy to allow the account file processing Lambda to perform actions"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "organizations:DescribeOrganizationalUnit"
              - "organizations:ListParents"
              - "organizations:ListAccounts"
              - "organizations:DescribeOrganization"
              - "organizations:DescribeAccount"
            Resource: "*"
          - Effect: "Allow"
            Action: "s3:ListBucket"
            Resource: !GetAtt ADFAccountBucket.Arn
          - Effect: "Allow"
            Action: "states:StartExecution"
            Resource: !Ref AccountManagementStateMachine
          - Effect: "Allow"
            Action: "s3:GetObject"
            Resource: !Sub "${ADFAccountBucket.Arn}/*"
      Roles:
        - !Ref AccountProcessingLambdaRole

  ADFAccountAccessRolePolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: "Additional policy that allows a lambda to assume the cross account access role"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Resource: !Sub "arn:${AWS::Partition}:iam::*:role/${CrossAccountAccessRoleName}"
      Roles:
        - !Ref AccountProcessingLambdaRole
        - !Ref GetAccountRegionsFunctionRole
        - !Ref DeleteDefaultVPCFunctionRole
        - !Ref AccountAliasConfigFunctionRole

  ADFAccountProcessingLambdaBasePolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: "Base policy for all ADF account processing lambdas"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
              - "xray:PutTelemetryRecords"
              - "xray:PutTraceSegments"
            Resource: "*"
      Roles:
        - !Ref AccountProcessingLambdaRole
        - !Ref GetAccountRegionsFunctionRole
        - !Ref DeleteDefaultVPCFunctionRole
        - !Ref AccountAliasConfigFunctionRole
        - !Ref AccountRegionConfigFunctionRole
        - !Ref AccountTagConfigFunctionRole
        - !Ref AccountOUConfigFunctionRole
        - !Ref CreateAccountFunctionRole
        - !Ref RegisterAccountForSupportFunctionRole

  StateMachineExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - states.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/aws-deployment-framework/account-management/"
      Policies:
        - PolicyName: "adf-state-machine-role-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "xray:PutTelemetryRecords"
                  - "xray:PutTraceSegments"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !GetAtt AccountAliasConfigFunction.Arn
                  - !GetAtt CreateAccountFunction.Arn
                  - !GetAtt RegisterAccountForSupportFunction.Arn
                  - !GetAtt AccountTagConfigFunction.Arn
                  - !GetAtt AccountOUConfigFunction.Arn
                  - !GetAtt GetAccountRegionsFunction.Arn
                  - !GetAtt DeleteDefaultVPCFunction.Arn
                  - !GetAtt AccountRegionConfigFunction.Arn

  AccountFileProcessingFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: process_account_files.lambda_handler
      Description: "ADF Lambda Function - Account File Processing"
      CodeUri: lambda_codebase/account_processing
      Tracing: Active
      Layers:
        - !Ref ADFSharedPythonLambdaLayerVersion
      Environment:
        Variables:
          MASTER_ACCOUNT_ID: !Ref AWS::AccountId
          ORGANIZATION_ID: !GetAtt Organization.OrganizationId
          ADF_VERSION: !FindInMap ['Metadata', 'ADF', 'Version']
          ADF_LOG_LEVEL: !Ref LogLevel
          ACCOUNT_MANAGEMENT_STATEMACHINE_ARN: !Ref AccountManagementStateMachine
          ADF_ROLE_NAME: !Ref CrossAccountAccessRoleName
      FunctionName: AccountFileProcessorFunction
      Role: !GetAtt AccountProcessingLambdaRole.Arn
      Events:
        S3YmlSuffixEvent:
          Type: S3
          Properties:
            Bucket:
              Ref: ADFAccountBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: yml
        S3YamlSuffixEvent:
          Type: S3
          Properties:
            Bucket:
              Ref: ADFAccountBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: yaml
    Metadata:
      BuildMethod: python3.12

  AccountAliasConfigFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/aws-deployment-framework/account-management/"

  AccountAliasConfigFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: configure_account_alias.lambda_handler
      Description: "ADF Lambda Function - Account Alias Configuration"
      CodeUri: lambda_codebase/account_processing
      Tracing: Active
      Layers:
        - !Ref ADFSharedPythonLambdaLayerVersion
      Environment:
        Variables:
          AWS_PARTITION: !Ref AWS::Partition
          MASTER_ACCOUNT_ID: !Ref AWS::AccountId
          ORGANIZATION_ID: !GetAtt Organization.OrganizationId
          ADF_VERSION: !FindInMap ['Metadata', 'ADF', 'Version']
          ADF_LOG_LEVEL: !Ref LogLevel
          ADF_ROLE_NAME: !Ref CrossAccountAccessRoleName
      FunctionName: AccountAliasConfigurationFunction
      Role: !GetAtt AccountAliasConfigFunctionRole.Arn
    Metadata:
      BuildMethod: python3.12

  AccountTagConfigFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/aws-deployment-framework/account-management/"
      Policies:
        - PolicyName: "adf-lambda-tag-resource-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "organizations:TagResource"
                  - "organizations:UntagResource"
                Resource: "*"

  AccountTagConfigFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: configure_account_tags.lambda_handler
      Description: "ADF Lambda Function - Account Tag Configuration"
      CodeUri: lambda_codebase/account_processing
      Tracing: Active
      Layers:
        - !Ref ADFSharedPythonLambdaLayerVersion
      Environment:
        Variables:
          MASTER_ACCOUNT_ID: !Ref AWS::AccountId
          ORGANIZATION_ID: !GetAtt Organization.OrganizationId
          ADF_VERSION: !FindInMap ['Metadata', 'ADF', 'Version']
          ADF_LOG_LEVEL: !Ref LogLevel
      FunctionName: AccountTagConfigurationFunction
      Role: !GetAtt AccountTagConfigFunctionRole.Arn
    Metadata:
      BuildMethod: python3.12

  AccountRegionConfigFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/aws-deployment-framework/account-management/"
      Policies:
        - PolicyName: "adf-lambda-account-region-resource-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "account:ListRegions"
                  - "account:EnableRegion"
                  - "sts:GetCallerIdentity"
                Resource: "*"
              - Effect: Allow
                Action: ssm:GetParameter
                Resource:
                  - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/target_regions"

  AccountRegionConfigFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: configure_account_regions.lambda_handler
      Description: "ADF Lambda Function - Account region Configuration"
      CodeUri: lambda_codebase/account_processing
      Tracing: Active
      Layers:
        - !Ref ADFSharedPythonLambdaLayerVersion
      Environment:
        Variables:
          MASTER_ACCOUNT_ID: !Ref AWS::AccountId
          ORGANIZATION_ID: !GetAtt Organization.OrganizationId
          ADF_VERSION: !FindInMap ['Metadata', 'ADF', 'Version']
          ADF_LOG_LEVEL: !Ref LogLevel
      FunctionName: AccountRegionConfigurationFunction
      Role: !GetAtt AccountRegionConfigFunctionRole.Arn
    Metadata:
      BuildMethod: python3.12

  AccountOUConfigFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: configure_account_ou.lambda_handler
      Description: "ADF Lambda Function - Account OU Configuration"
      CodeUri: lambda_codebase/account_processing
      Tracing: Active
      Layers:
        - !Ref ADFSharedPythonLambdaLayerVersion
      Environment:
        Variables:
          MASTER_ACCOUNT_ID: !Ref AWS::AccountId
          ORGANIZATION_ID: !GetAtt Organization.OrganizationId
          ADF_VERSION: !FindInMap ['Metadata', 'ADF', 'Version']
          ADF_LOG_LEVEL: !Ref LogLevel
      FunctionName: AccountOUConfigurationFunction
      Role: !GetAtt AccountOUConfigFunctionRole.Arn
    Metadata:
      BuildMethod: python3.12

  AccountOUConfigFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/aws-deployment-framework/account-management/"
      Policies:
        - PolicyName: "adf-lambda-policy-move-ou"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "organizations:ListRoots"
                  - "organizations:ListParents"
                  - "organizations:MoveAccount"
                  - "organizations:ListOrganizationalUnitsForParent"
                  - "organizations:ListChildren"
                  - "organizations:ListAccounts*"
                Resource: "*"

  GetAccountRegionsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: get_account_regions.lambda_handler
      Description: "ADF Lambda Function - Get Default Regions for an account"
      CodeUri: lambda_codebase/account_processing
      Tracing: Active
      Layers:
        - !Ref ADFSharedPythonLambdaLayerVersion
      Environment:
        Variables:
          AWS_PARTITION: !Ref AWS::Partition
          MASTER_ACCOUNT_ID: !Ref AWS::AccountId
          ORGANIZATION_ID: !GetAtt Organization.OrganizationId
          ADF_VERSION: !FindInMap ['Metadata', 'ADF', 'Version']
          ADF_LOG_LEVEL: !Ref LogLevel
          ADF_ROLE_NAME: !Ref CrossAccountAccessRoleName
      FunctionName: GetAccountRegionsFunction
      Role: !GetAtt GetAccountRegionsFunctionRole.Arn
    Metadata:
      BuildMethod: python3.12

  GetAccountRegionsFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/aws-deployment-framework/account-management/"

  DeleteDefaultVPCFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: delete_default_vpc.lambda_handler
      Description: "ADF Lambda Function - Delete the default VPC for a region"
      CodeUri: lambda_codebase/account_processing
      Tracing: Active
      Layers:
        - !Ref ADFSharedPythonLambdaLayerVersion
      Environment:
        Variables:
          AWS_PARTITION: !Ref AWS::Partition
          MASTER_ACCOUNT_ID: !Ref AWS::AccountId
          ORGANIZATION_ID: !GetAtt Organization.OrganizationId
          ADF_VERSION: !FindInMap ['Metadata', 'ADF', 'Version']
          ADF_LOG_LEVEL: !Ref LogLevel
          ADF_ROLE_NAME: !Ref CrossAccountAccessRoleName
      FunctionName: DeleteDefaultVPCFunction
      Role: !GetAtt DeleteDefaultVPCFunctionRole.Arn
    Metadata:
      BuildMethod: python3.12

  DeleteDefaultVPCFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/aws-deployment-framework/account-management/"

  CreateAccountFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: create_account.lambda_handler
      Description: "ADF Lambda Function - Create an account"
      CodeUri: lambda_codebase/account_processing
      Tracing: Active
      Layers:
        - !Ref ADFSharedPythonLambdaLayerVersion
      Environment:
        Variables:
          MASTER_ACCOUNT_ID: !Ref AWS::AccountId
          ORGANIZATION_ID: !GetAtt Organization.OrganizationId
          ADF_VERSION: !FindInMap ['Metadata', 'ADF', 'Version']
          ADF_LOG_LEVEL: !Ref LogLevel
          ADF_ROLE_NAME: !Ref CrossAccountAccessRoleName
      FunctionName: CreateAccountFunction
      Role: !GetAtt CreateAccountFunctionRole.Arn
    Metadata:
      BuildMethod: python3.12

  CreateAccountFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/aws-deployment-framework/account-management/"
      Policies:
        - PolicyName: "adf-lambda-create-account-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "organizations:CreateAccount"
                  - "organizations:DescribeCreateAccountStatus"
                Resource: "*"

  RegisterAccountForSupportFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: register_account_for_support.lambda_handler
      Description: "ADF Lambda Function - Registers an account for enterprise support"
      CodeUri: lambda_codebase/account_processing
      Tracing: Active
      Layers:
        - !Ref ADFSharedPythonLambdaLayerVersion
      Environment:
        Variables:
          MASTER_ACCOUNT_ID: !Ref AWS::AccountId
          ORGANIZATION_ID: !GetAtt Organization.OrganizationId
          ADF_VERSION: !FindInMap ['Metadata', 'ADF', 'Version']
          ADF_LOG_LEVEL: !Ref LogLevel
      FunctionName: RegisterAccountForSupportFunction
      Role: !GetAtt RegisterAccountForSupportFunctionRole.Arn
    Metadata:
      BuildMethod: python3.12

  RegisterAccountForSupportFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/aws-deployment-framework/account-management/"
      Policies:
        - PolicyName: "adf-lambda-support-access-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "support:DescribeSeverityLevels"
                  - "support:CreateCase"
                Resource: "*"

  ADFAccountBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AccessControl: BucketOwnerFullControl
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  AccountManagementStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      RoleArn: !GetAtt StateMachineExecutionRole.Arn
      TracingConfiguration:
        Enabled: true
      DefinitionString: !Sub |-
        {
          "Comment": "Create account?",
          "StartAt": "CreateAccountChoice",
          "States": {
            "CreateAccountChoice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.needs_created",
                  "BooleanEquals": true,
                  "Comment": "Create Account",
                  "Next": "CreateAccount"
                }
              ],
              "Default": "ConfigureAccountRegions"
            },
            "ConfigureAccountAlias": {
              "Type": "Task",
              "Resource": "${AccountAliasConfigFunction.Arn}",
              "Retry": [
                {
                  "ErrorEquals": ["States.TaskFailed"],
                  "IntervalSeconds": 3,
                  "BackoffRate": 1.5,
                  "MaxAttempts": 10
                }, {
                  "ErrorEquals": [
                    "Lambda.Unknown",
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "BackoffRate": 2,
                  "MaxAttempts": 6
                }
              ],
              "Next": "ConfigureAccountTags"
            },
            "CreateAccount": {
              "Type": "Task",
              "Resource": "${CreateAccountFunction.Arn}",
              "Retry": [
                {
                  "ErrorEquals": ["States.TaskFailed"],
                  "IntervalSeconds": 3,
                  "BackoffRate": 1.5,
                  "MaxAttempts": 10
                }, {
                  "ErrorEquals": [
                    "Lambda.Unknown",
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "BackoffRate": 2,
                  "MaxAttempts": 6
                }
              ],
              "Next": "WaitFor10Seconds"
            },
            "WaitFor10Seconds": {
              "Type": "Wait",
              "Seconds": 10,
              "Next": "ConfigureAccountSupport"
            },
            "ConfigureAccountSupport": {
              "Type": "Task",
              "Resource": "${RegisterAccountForSupportFunction.Arn}",
              "Retry": [
                {
                  "ErrorEquals": ["States.TaskFailed"],
                  "IntervalSeconds": 3,
                  "BackoffRate": 1.5,
                  "MaxAttempts": 10
                }, {
                  "ErrorEquals": [
                    "Lambda.Unknown",
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "BackoffRate": 2,
                  "MaxAttempts": 6
                }
              ],
              "Next": "ConfigureAccountRegions"
            },
            "ConfigureAccountRegions": {
              "Type": "Task",
              "Resource": "${AccountRegionConfigFunction.Arn}",
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Next": "AreRegionsConfigured"
            },
            "AreRegionsConfigured": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.all_regions_enabled",
                  "BooleanEquals": true,
                  "Next": "ConfigureAccountAlias"
                }
              ],
              "Default": "Wait 15 seconds"
            },
            "Wait 15 seconds": {
              "Type": "Wait",
              "Seconds": 15,
              "Next": "ConfigureAccountRegions"
            },
            "ConfigureAccountTags": {
              "Type": "Task",
              "Resource": "${AccountTagConfigFunction.Arn}",
              "Retry": [
                {
                  "ErrorEquals": ["States.TaskFailed"],
                  "IntervalSeconds": 3,
                  "BackoffRate": 1.5,
                  "MaxAttempts": 10
                }, {
                  "ErrorEquals": [
                    "Lambda.Unknown",
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "BackoffRate": 2,
                  "MaxAttempts": 6
                }
              ],
              "Next": "ConfigureAccountOU"
            },
            "ConfigureAccountOU": {
              "Type": "Task",
              "Resource": "${AccountOUConfigFunction.Arn}",
              "Retry": [
                {
                  "ErrorEquals": ["States.TaskFailed"],
                  "IntervalSeconds": 3,
                  "BackoffRate": 1.5,
                  "MaxAttempts": 10
                }, {
                  "ErrorEquals": [
                    "Lambda.Unknown",
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "BackoffRate": 2,
                  "MaxAttempts": 6
                }
              ],
              "Next": "DeleteDefaultVPCChoice"
            },
            "DeleteDefaultVPCChoice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.delete_default_vpc",
                  "BooleanEquals": true,
                  "Next": "GetAccountDefaultRegionsFunction"
                }
              ],
              "Default": "Success"
            },
            "GetAccountDefaultRegionsFunction": {
              "Type": "Task",
              "Resource": "${GetAccountRegionsFunction.Arn}",
              "Retry": [
                {
                  "ErrorEquals": ["States.TaskFailed"],
                  "IntervalSeconds": 3,
                  "BackoffRate": 1.5,
                  "MaxAttempts": 10
                }, {
                  "ErrorEquals": [
                    "Lambda.Unknown",
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "BackoffRate": 2,
                  "MaxAttempts": 6
                }
              ],
              "Next": "DeleteDefaultVPCMap"
            },
            "DeleteDefaultVPCMap": {
              "Type": "Map",
              "Next": "Success",
              "Iterator": {
                "StartAt": "DeleteDefaultVPC",
                  "States": {
                    "DeleteDefaultVPC": {
                      "Type": "Task",
                      "Resource": "${DeleteDefaultVPCFunction.Arn}",
                      "OutputPath": "$.Payload",
                      "Parameters": {
                        "Payload.$": "$"
                      },
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "Lambda.Unknown",
                            "Lambda.ServiceException",
                            "Lambda.AWSLambdaException",
                            "Lambda.SdkClientException",
                            "Lambda.TooManyRequestsException"
                          ],
                          "IntervalSeconds": 2,
                          "MaxAttempts": 6,
                          "BackoffRate": 2
                        }
                      ],
                      "End": true
                    }
                  }
                },
                "ItemsPath": "$.default_regions",
                "MaxConcurrency": 20,
                "Parameters": {
                  "region.$": "$$.Map.Item.Value",
                  "account_id.$": "$.account_id"
                },
                "ResultPath": null
              },
              "Success": {
                "Type": "Succeed"
              }
            }
          }
  ### Account processing end

  ADFSharedPythonLambdaLayerVersion:
    Type: "AWS::Serverless::LayerVersion"
    Properties:
      ContentUri: "./lambda_codebase/initial_commit/bootstrap_repository/adf-build/shared/python"
      CompatibleArchitectures:
        - arm64
      CompatibleRuntimes:
        - python3.12
      Description: "Shared Lambda Layer between master and deployment account"
      LayerName: adf_shared_layer
    Metadata:
      BuildMethod: python3.12

  LambdaLayerPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: "Policy to allow Lambda functions to use the ADF Shared Python layer"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "lambda:GetLayerVersion"
            Resource: !Ref ADFSharedPythonLambdaLayerVersion
      Roles:
        - !Ref AccountAliasConfigFunctionRole
        - !Ref AccountOUConfigFunctionRole
        - !Ref AccountProcessingLambdaRole
        - !Ref AccountRegionConfigFunctionRole
        - !Ref AccountTagConfigFunctionRole
        - !Ref CreateAccountFunctionRole
        - !Ref DeleteDefaultVPCFunctionRole
        - !Ref GetAccountRegionsFunctionRole
        - !Ref LambdaRole
        - !Ref RegisterAccountForSupportFunctionRole

  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "states.amazonaws.com"
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  LambdaPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: "Policy to allow Lambda to perform actions"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "sts:AssumeRole"
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
              - "organizations:DescribeOrganizationalUnit"
              - "organizations:ListParents"
              - "cloudformation:*"
              - "iam:GetRole"
              - "iam:PassRole"
              - "iam:CreateRole"
              - "iam:PutRolePolicy"
              - "organizations:DescribeOrganization"
              - "organizations:DescribeAccount"
              - "ssm:*"
              - "states:StartExecution"
            Resource: "*"
          - Effect: "Allow"
            Action: "s3:ListBucket"
            Resource: !GetAtt BootstrapTemplatesBucket.Arn
          - Effect: "Allow"
            Action: "s3:GetObject"
            Resource:
              !Sub "${BootstrapTemplatesBucket.Arn}/*"
      Roles:
        - !Ref LambdaRole

  StackWaiterFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: wait_until_complete.lambda_handler
      Layers:
        - !Ref ADFSharedPythonLambdaLayerVersion
      Description: "ADF Lambda Function - StackWaiterFunction"
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref BootstrapTemplatesBucket
          TERMINATION_PROTECTION: false
          MASTER_ACCOUNT_ID: !Ref AWS::AccountId
          ORGANIZATION_ID: !GetAtt Organization.OrganizationId
          ADF_VERSION: !FindInMap ["Metadata", "ADF", "Version"]
          ADF_LOG_LEVEL: !Ref LogLevel
      FunctionName: StackWaiter
      Role: !GetAtt LambdaRole.Arn
    Metadata:
      BuildMethod: python3.12

  DetermineEventFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: determine_event.lambda_handler
      Layers:
        - !Ref ADFSharedPythonLambdaLayerVersion
      Description: "ADF Lambda Function - DetermineEvent"
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref BootstrapTemplatesBucket
          TERMINATION_PROTECTION: false
          DEPLOYMENT_ACCOUNT_BUCKET: !GetAtt SharedModulesBucketName.Value
          MASTER_ACCOUNT_ID: !Ref AWS::AccountId
          ORGANIZATION_ID: !GetAtt Organization.OrganizationId
          ADF_VERSION: !FindInMap ["Metadata", "ADF", "Version"]
          ADF_LOG_LEVEL: !Ref LogLevel
      FunctionName: DetermineEventFunction
      Role: !GetAtt LambdaRole.Arn
    Metadata:
      BuildMethod: python3.12

  CrossAccountExecuteFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: account_bootstrap.lambda_handler
      Layers:
        - !Ref ADFSharedPythonLambdaLayerVersion
      Description: "ADF Lambda Function - CrossAccountExecuteFunction"
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref BootstrapTemplatesBucket
          TERMINATION_PROTECTION: false
          DEPLOYMENT_ACCOUNT_BUCKET: !GetAtt SharedModulesBucketName.Value
          MASTER_ACCOUNT_ID: !Ref AWS::AccountId
          ORGANIZATION_ID: !GetAtt Organization.OrganizationId
          ADF_VERSION: !FindInMap ["Metadata", "ADF", "Version"]
          ADF_LOG_LEVEL: !Ref LogLevel
      FunctionName: CrossAccountExecuteFunction
      Role: !GetAtt LambdaRole.Arn
      Timeout: 900
    Metadata:
      BuildMethod: python3.12

  RoleStackDeploymentFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: deployment_account_config.lambda_handler
      Layers:
        - !Ref ADFSharedPythonLambdaLayerVersion
      Description: "ADF Lambda Function - RoleStackDeploymentFunction"
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref BootstrapTemplatesBucket
          TERMINATION_PROTECTION: false
          MASTER_ACCOUNT_ID: !Ref AWS::AccountId
          ADF_VERSION: !FindInMap ["Metadata", "ADF", "Version"]
          ADF_LOG_LEVEL: !Ref LogLevel
      FunctionName: RoleStackDeploymentFunction
      Role: !GetAtt LambdaRole.Arn
    Metadata:
      BuildMethod: python3.12

  MovedToRootActionFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: moved_to_root.lambda_handler
      Layers:
        - !Ref ADFSharedPythonLambdaLayerVersion
      Description: "ADF Lambda Function - MovedToRootActionFunction"
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref BootstrapTemplatesBucket
          TERMINATION_PROTECTION: false
          MASTER_ACCOUNT_ID: !Ref AWS::AccountId
          ADF_VERSION: !FindInMap ["Metadata", "ADF", "Version"]
          ADF_LOG_LEVEL: !Ref LogLevel
      FunctionName: MovedToRootActionFunction
      Role: !GetAtt LambdaRole.Arn
      Timeout: 900
    Metadata:
      BuildMethod: python3.12

  UpdateResourcePoliciesFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: generic_account_config.lambda_handler
      Layers:
        - !Ref ADFSharedPythonLambdaLayerVersion
      Description: "ADF Lambda Function - UpdateResourcePoliciesFunction"
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref BootstrapTemplatesBucket
          TERMINATION_PROTECTION: false
          MASTER_ACCOUNT_ID: !Ref AWS::AccountId
          ADF_VERSION: !FindInMap ["Metadata", "ADF", "Version"]
          ADF_LOG_LEVEL: !Ref LogLevel
      FunctionName: UpdateResourcePoliciesFunction
      Role: !GetAtt LambdaRole.Arn
    Metadata:
      BuildMethod: python3.12

  CloudWatchEventsRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: Triggers StateMachine on Move OU
      EventPattern:
        source:
          - aws.organizations
        detail:
          eventSource:
            - organizations.amazonaws.com
          eventName:
            - MoveAccount
      Targets:
        - Arn: !Ref AccountBootstrappingStateMachine
          RoleArn: !GetAtt AccountBootstrapStartExecutionRole.Arn
          Id: CreateStackLinkedAccountV1

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Ref "CodeBuildPolicy"
      RoleName: "adf-codebuild-role"

  BootstrapCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Ref "CodeBuildPolicy"
      Policies:
        - PolicyName: bootstrap-only
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'support:CreateCase'
                  - 'support:DescribeSeverityLevels'
                Resource: '*'

  CodeBuildPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: "Policy to allow codebuild to perform actions"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
              - "organizations:AttachPolicy"
              - "organizations:CreatePolicy"
              - "organizations:DeletePolicy"
              - "organizations:DescribeAccount"
              - "organizations:DescribeOrganization"
              - "organizations:DescribeOrganizationalUnit"
              - "organizations:DescribePolicy"
              - "organizations:DetachPolicy"
              - "organizations:EnablePolicyType"
              - "organizations:ListAccounts"
              - "organizations:ListAccountsForParent"
              - "organizations:ListOrganizationalUnitsForParent"
              - "organizations:ListChildren"
              - "organizations:ListParents"
              - "organizations:ListPolicies"
              - "organizations:ListPoliciesForTarget"
              - "organizations:ListRoots"
              - "organizations:UpdatePolicy"
              - "organizations:CreateAccount"
              - "organizations:MoveAccount"
              - "organizations:DescribeCreateAccountStatus"
              - "organizations:TagResource"
              - "ssm:GetParameter"
              - "ssm:GetParameters"
              - "ssm:PutParameter"
              - "states:Describe*"
              - "states:StartExecution"
              - "sts:GetCallerIdentity"
              - "sts:assumeRole"
              - "cloudformation:ValidateTemplate"
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "states:ListExecutions"
            Resource:
              - !Ref AccountManagementStateMachine
              - !Ref AccountBootstrappingStateMachine
          - Effect: "Allow"
            Action:
              - "cloudformation:CreateStack"
              - "cloudformation:DescribeChangeSet"
              - "cloudformation:DeleteStack"
              - "cloudformation:UpdateStack"
              - "cloudformation:CancelUpdateStack"
              - "cloudformation:ContinueUpdateRollback"
              - "cloudformation:CreateChangeSet"
              - "cloudformation:DeleteChangeSet"
              - "cloudformation:DescribeStacks"
              - "cloudformation:CreateUploadBucket"
              - "cloudformation:ExecuteChangeSet"
              - "cloudformation:SetStackPolicy"
              - "cloudformation:SignalResource"
              - "cloudformation:UpdateTerminationProtection"
            Resource:
              - !Sub "arn:${AWS::Partition}:cloudformation:*:*:stack/adf-global-base-*/*"
              - !Sub "arn:${AWS::Partition}:cloudformation:*:*:stack/adf-regional-base-*/*"
              - !Sub "arn:${AWS::Partition}:cloudformation:*:${AWS::AccountId}:stack/adf-global-base-adf-build/*"
          - Effect: "Allow"
            Action:
              - "s3:DeleteObject"
              - "s3:GetBucketPolicy"
              - "s3:GetObject"
              - "s3:ListBucket"
              - "s3:PutObject"
              - "s3:ListObjects"
            Resource:
              - !GetAtt "BootstrapTemplatesBucket.Arn"
              - !Sub "${BootstrapTemplatesBucket.Arn}/*"
              - !GetAtt "BootstrapArtifactStorageBucket.Arn"
              - !Sub "${BootstrapArtifactStorageBucket.Arn}/*"
              - !Sub "arn:${AWS::Partition}:s3:::${SharedModulesBucket.BucketName}"
              - !Sub "arn:${AWS::Partition}:s3:::${SharedModulesBucket.BucketName}/*"
              - !GetAtt ADFAccountBucket.Arn
              - !Sub "${ADFAccountBucket.Arn}/*"
          - Effect: "Allow"
            Action:
              - "codebuild:*"
            Resource:
              # Hardcoded name (instead of !GetAtt CodeBuildProject.Arn) to avoid a circular
              # dependency. Converting this to an inline policy can break the circle
              - !Sub "arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/aws-deployment-framework-base-templates"
          - Effect: "Allow"
            Action:
              - "iam:CreatePolicy"
              - "iam:CreateRole"
              - "iam:DeleteRole"
              - "iam:DeleteRolePolicy"
              - "iam:GetRole"
              - "iam:PutRolePolicy"
              - "iam:UpdateAssumeRolePolicy"
            Resource:
              - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${CrossAccountAccessRoleName}"
              - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${CrossAccountAccessRoleName}-readonly"

  CodeCommitRepository:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: "aws-deployment-framework-bootstrap"
      RepositoryDescription: !Sub >-
        CodeCommit Repo for AWS Deployment Framework base in ${AWS::AccountId}

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      TimeoutInMinutes: 60
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: "BUILD_GENERAL1_LARGE"
        PrivilegedMode: false
        Image: "aws/codebuild/standard:7.0"
        EnvironmentVariables:
          - Name: ADF_VERSION
            Value: !FindInMap ["Metadata", "ADF", "Version"]
          - Name: TERMINATION_PROTECTION
            Value: "false"
          - Name: PYTHONPATH
            Value: "./adf-build/shared/python"
          - Name: S3_BUCKET
            Value: !Ref BootstrapTemplatesBucket
          - Name: ACCOUNT_BUCKET
            Value: !Ref ADFAccountBucket
          - Name: MASTER_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: DEPLOYMENT_ACCOUNT_BUCKET
            Value: !GetAtt SharedModulesBucketName.Value
          - Name: ORGANIZATION_ID
            Value: !GetAtt Organization.OrganizationId
          - Name: ADF_LOG_LEVEL
            Value: !Ref LogLevel
          - Name: ACCOUNT_MANAGEMENT_STATE_MACHINE_ARN
            Value: !Ref AccountManagementStateMachine
          - Name: ACCOUNT_BOOTSTRAPPING_STATE_MACHINE_ARN
            Value: !Ref AccountBootstrappingStateMachine
        Type: LINUX_CONTAINER
      Name: "aws-deployment-framework-base-templates"
      ServiceRole: !Ref BootstrapCodeBuildRole
      Source:
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.12
            pre_build:
              commands:
                - >-
                  pip install
                  -r requirements-dev.txt
                  -r adf-build/requirements.txt
                  -r adf-build/requirements-dev.txt
                  -r adf-build/shared/requirements.txt
                  -r adf-build/shared/requirements-dev.txt
                  -r adf-build/shared/helpers/requirements.txt
                  -r adf-build/shared/helpers/requirements-dev.txt
                  --quiet
                - tox
                - >-
                  docker run --privileged --rm
                  public.ecr.aws/eks-distro-build-tooling/binfmt-misc:qemu-v7.0.0
                  --install arm64
            build:
              commands:
                - >-
                  sam build
                  --use-container
                  --template adf-bootstrap/deployment/global.yml
                - >-
                  sam package
                  --output-template-file adf-bootstrap/deployment/global.yml
                  --s3-prefix adf-bootstrap/deployment
                  --s3-bucket $DEPLOYMENT_ACCOUNT_BUCKET
                - python adf-build/store_config.py
                # Shared Modules to be used with AWS CodeBuild:
                - >-
                  aws s3 sync
                  ./adf-build/shared
                  s3://$DEPLOYMENT_ACCOUNT_BUCKET/adf-build
                  --quiet
                # Base templates:
                - >-
                  aws s3 sync . s3://$S3_BUCKET --quiet --delete
                # Upload account files to the ACCOUNT_BUCKET
                - >-
                  python adf-build/shared/helpers/sync_to_s3.py
                  --extension .yml
                  --extension .yaml
                  --metadata adf_version=${ADF_VERSION}
                  --upload-with-metadata execution_id=${CODEPIPELINE_EXECUTION_ID}
                  --recursive adf-accounts
                  s3://$ACCOUNT_BUCKET
                # Sleep for 10 seconds so the state machine is able to kick start the processing
                # of these newly uploaded files if any.
                - sleep 10
                # Updates config, updates (or creates) base stacks:
                - python adf-build/main.py
        Type: CODEPIPELINE
      Tags:
        - Key: "Name"
          Value: "aws-deployment-framework-base-templates"

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref BootstrapArtifactStorageBucket
      RoleArn: !GetAtt CodePipelineRole.Arn
      Name: "aws-deployment-framework-bootstrap-pipeline"
      Stages:
        - Name: CodeCommit
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: CodeCommit
              OutputArtifacts:
                - Name: "TemplateSource"
              Configuration:
                BranchName: !GetAtt DetermineDefaultBranchName.DefaultBranchName
                RepositoryName: !GetAtt CodeCommitRepository.Name
                PollForSourceChanges: false
              RunOrder: 1
        - Name: UploadAndUpdateBaseStacks
          Actions:
            - Name: UploadAndUpdateBaseStacks
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              OutputArtifacts:
                - Name: "aws-deployment-framework-bootstrap-build"
              InputArtifacts:
                - Name: "TemplateSource"
              Configuration:
                ProjectName: !Ref CodeBuildProject
                EnvironmentVariables: >-
                  [
                    {
                      "name": "CODEPIPELINE_EXECUTION_ID",
                      "value": "#{codepipeline.PipelineExecutionId}",
                      "type": "PLAINTEXT"
                    }
                  ]
              RunOrder: 1

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "adf-codepipeline-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  CodePipelineRolePolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: "Policy to allow codepipeline to perform actions"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "codebuild:*"
              - "codecommit:*"
              - "s3:GetBucketPolicy"
              - "s3:GetObject"
              - "s3:ListBucket"
              - "s3:PutObject"
            Resource: "*"
      Roles:
        - !Ref CodePipelineRole

  OrgEventCodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "adf-org-event-codepipeline"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  OrgEventCodePipelinePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "adf-org-event-codepipeline-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "codepipeline:StartPipelineExecution"
            Resource: !Sub "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}"
      Roles:
        - !Ref OrgEventCodePipelineRole

  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - states.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/aws-deployment-framework/account-bootstrapping/"
      Policies:
        - PolicyName: "adf-state-machine-role-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !GetAtt DetermineEventFunction.Arn
                  - !GetAtt CrossAccountExecuteFunction.Arn
                  - !GetAtt MovedToRootActionFunction.Arn
                  - !GetAtt StackWaiterFunction.Arn
                  - !GetAtt RoleStackDeploymentFunction.Arn
                  - !GetAtt UpdateResourcePoliciesFunction.Arn

  AccountBootstrapStartExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - events.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/aws-deployment-framework/account-bootstrapping/"
      Policies:
        - PolicyName: "adf-start-state-machine"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "states:StartExecution"
                Resource:
                  - !Ref AccountBootstrappingStateMachine

  AccountBootstrappingStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      RoleArn: !GetAtt StatesExecutionRole.Arn
      TracingConfiguration:
        Enabled: true
      DefinitionString: !Sub |-
        {
          "Comment": "ADF Account Bootstrapping Process",
          "StartAt": "DetermineEvent",
          "States": {
            "DetermineEvent": {
              "Type": "Task",
              "Resource": "${DetermineEventFunction.Arn}",
              "Next": "MovedToRootOrProtected?",
              "TimeoutSeconds": 300,
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.Unknown",
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "BackoffRate": 2,
                  "MaxAttempts": 6
                }
              ]
            },
            "MovedToRootOrProtected?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.moved_to_protected",
                  "NumericEquals": 1,
                  "Next": "ExecuteDeploymentAccountStateMachine"
                },
                {
                  "Variable": "$.moved_to_root",
                  "NumericEquals": 1,
                  "Next": "MovedToRootAction"
                }
              ],
              "Default": "CreateOrUpdateBaseStack"
            },
            "CreateOrUpdateBaseStack": {
              "Type": "Task",
              "Resource": "${CrossAccountExecuteFunction.Arn}",
              "Retry": [
                {
                  "ErrorEquals": [
                    "InvalidTemplateError",
                    "GenericAccountConfigureError"
                  ],
                  "IntervalSeconds": 1,
                  "BackoffRate": 1.1,
                  "MaxAttempts": 45
                }, {
                  "ErrorEquals": [
                    "AccountCreationNotFinishedError"
                  ],
                  "IntervalSeconds": 10,
                  "BackoffRate": 1.1,
                  "MaxAttempts": 45
                }, {
                  "ErrorEquals": [
                    "Lambda.Unknown",
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException",
                    "States.Timeout"
                  ],
                  "IntervalSeconds": 2,
                  "BackoffRate": 2,
                  "MaxAttempts": 6
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "ExecuteDeploymentAccountStateMachine",
                  "ResultPath": "$.error"
                }
              ],
              "Next": "WaitUntilBootstrapComplete",
              "TimeoutSeconds": 900
            },
            "MovedToRootAction": {
              "Type": "Task",
              "Resource": "${MovedToRootActionFunction.Arn}",
              "Retry": [
                {
                  "ErrorEquals": [
                    "RetryError"
                  ],
                  "IntervalSeconds": 10,
                  "BackoffRate": 1.0,
                  "MaxAttempts": 20
                }, {
                  "ErrorEquals": [
                    "Lambda.Unknown",
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "BackoffRate": 2,
                  "MaxAttempts": 6
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "ExecuteDeploymentAccountStateMachine",
                  "ResultPath": "$.error"
                }
              ],
              "Next": "ExecuteDeploymentAccountStateMachine",
              "TimeoutSeconds": 900
            },
            "WaitUntilBootstrapComplete": {
              "Type": "Task",
              "Resource": "${StackWaiterFunction.Arn}",
              "Retry": [
                {
                  "ErrorEquals": ["RetryError"],
                  "IntervalSeconds": 10,
                  "BackoffRate": 1.0,
                  "MaxAttempts": 500
                }, {
                  "ErrorEquals": [
                    "Lambda.Unknown",
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "BackoffRate": 2,
                  "MaxAttempts": 6
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "ExecuteDeploymentAccountStateMachine",
                  "ResultPath": "$.error"
                }
              ],
              "Next": "DeploymentAccount?",
              "TimeoutSeconds": 900
            },
            "DeploymentAccount?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.is_deployment_account",
                  "NumericEquals": 1,
                  "Next": "DeploymentAccountConfig"
                }
              ],
              "Default": "ExecuteDeploymentAccountStateMachine"
            },
            "DeploymentAccountConfig": {
              "Type": "Task",
              "Resource": "${RoleStackDeploymentFunction.Arn}",
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.Unknown",
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "BackoffRate": 2,
                  "MaxAttempts": 6
                }
              ],
              "End": true,
              "TimeoutSeconds": 900
            },
            "ExecuteDeploymentAccountStateMachine": {
              "Type": "Task",
              "Resource": "${UpdateResourcePoliciesFunction.Arn}",
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.Unknown",
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "BackoffRate": 2,
                  "MaxAttempts": 6
                }
              ],
              "End": true,
              "TimeoutSeconds": 900
            }
          }
        }

  DetermineDefaultBranchName:
    Type: Custom::DetermineDefaultBranchName
    Properties:
      ServiceToken: !GetAtt DetermineDefaultBranchNameHandler.Arn
      Version: !FindInMap ["Metadata", "ADF", "Version"]
      RepositoryArn: !GetAtt CodeCommitRepository.Arn

  DetermineDefaultBranchNameHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      CodeUri: lambda_codebase/initial_commit/bootstrap_repository/adf-bootstrap/deployment/lambda_codebase/determine_default_branch
      Description: "ADF Lambda Function - BootstrapDetermineDefaultBranchName"
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - codecommit:GetRepository
              Resource: !GetAtt CodeCommitRepository.Arn
      FunctionName: ADFBootstrapDetermineDefaultBranchName
    Metadata:
      BuildMethod: python3.12

  InitialCommit:
    Type: Custom::InitialCommit
    Properties:
      ServiceToken: !GetAtt InitialCommitHandler.Arn
      Version: !FindInMap ["Metadata", "ADF", "Version"]
      RepositoryArn: !GetAtt CodeCommitRepository.Arn
      DirectoryName: bootstrap_repository
      ExistingAccountId: !Ref DeploymentAccountId
      DeploymentAccountRegion: !Ref DeploymentAccountMainRegion
      DeploymentAccountFullName: !Ref DeploymentAccountName
      DeploymentAccountEmailAddress: !Ref DeploymentAccountEmailAddress
      DeploymentAccountAlias: !Ref DeploymentAccountAlias
      CrossAccountAccessRole: !Ref CrossAccountAccessRoleName
      TargetRegions: !Ref DeploymentAccountTargetRegions
      ProtectedOUs: !Ref ProtectedOUs
      NotificationEndpoint: !Ref MainNotificationEndpoint
      DefaultBranchName: !GetAtt DetermineDefaultBranchName.DefaultBranchName

  InitialCommitHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      CodeUri: lambda_codebase/initial_commit
      Description: "ADF Lambda Function - BootstrapCreateInitialCommitFunction"
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - codecommit:CreateBranch
                - codecommit:CreateCommit
                - codecommit:CreatePullRequest
                - codecommit:DeleteBranch
                - codecommit:GetBranch
                - codecommit:GetDifferences
              Resource: !GetAtt CodeCommitRepository.Arn
      FunctionName: BootstrapCreateInitialCommitFunction
    Metadata:
      BuildMethod: python3.12

  SharedModulesBucket:
    Type: Custom::CrossRegionBucket
    Properties:
      ServiceToken: !GetAtt CrossRegionBucketHandler.Arn
      Region: !Ref DeploymentAccountMainRegion
      BucketNamePrefix: !Sub "adf-shared-modules-${DeploymentAccountMainRegion}"
      Version: !FindInMap ["Metadata", "ADF", "Version"]
      PolicyDocument:
        Statement:
          - Action:
              - s3:Get*
              - s3:List*
              - s3:PutObject
            Effect: Allow
            Principal:
              AWS: !Sub "arn:${AWS::Partition}:iam::${DeploymentAccount.AccountId}:root"
              Service:
                - codebuild.amazonaws.com
                - lambda.amazonaws.com
                - cloudformation.amazonaws.com

  SharedModulesBucketName:
    Type: AWS::SSM::Parameter
    Properties:
      Description: DO NOT EDIT - Used by The AWS Deployment Framework
      Name: shared_modules_bucket
      Type: String
      Value: !GetAtt SharedModulesBucket.BucketName

  LogLevelSetting:
    Type: AWS::SSM::Parameter
    Properties:
      Description: DO NOT EDIT - Used by The AWS Deployment Framework
      Name: adf_log_level
      Type: String
      Value: !Ref LogLevel

  CrossRegionBucketHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      CodeUri: lambda_codebase/cross_region_bucket
      Layers:
        - !Ref ADFSharedPythonLambdaLayerVersion
      Description: "ADF Lambda Function - Create Deployment Bucket in Main Deployment Region"
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: s3:CreateBucket
              Resource: "*"
            - Effect: Allow
              Action:
                - s3:DeleteBucket
                - s3:PutEncryptionConfiguration
                - s3:PutBucketPolicy
                - s3:PutBucketPublicAccessBlock
              # This must match BucketNamePrefix of the SharedModulesBucket resource
              Resource: !Sub "arn:${AWS::Partition}:s3:::adf-shared-modules-*"
            - Effect: Allow
              Action: ssm:GetParameter
              Resource:
                # Hardcoded name (instead of ${SharedModulesBucketName}) to avoid a circular
                # dependency. Converting this to an inline policy can break the circle
                - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/shared_modules_bucket"
                - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/deployment_account_region"
            - Effect: "Allow"
              Action: "lambda:GetLayerVersion"
              Resource: !Ref ADFSharedPythonLambdaLayerVersion
      FunctionName: CrossRegionBucketHandler
    Metadata:
      BuildMethod: python3.12

  Organization:
    Type: Custom::Organization
    Properties:
      ServiceToken: !GetAtt OrganizationHandler.Arn

  OrganizationHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      CodeUri: lambda_codebase/organization
      Description: "ADF Lambda Function - Enable AWS Organizations"
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "organizations:CreateOrganization"
                - "organizations:DeleteOrganization"
                - "organizations:DescribeOrganization"
                - "organizations:ListRoots"
              Resource: "*"
            - Effect: Allow
              Action: "iam:CreateServiceLinkedRole"
              Resource: !Sub "arn:${AWS::Partition}:iam::*:role/aws-service-role/*"
      FunctionName: AwsOrganizationsHandler
    Metadata:
      BuildMethod: python3.12

  DeploymentOrganizationUnit:
    Type: Custom::OrganizationUnit
    Properties:
      ServiceToken: !GetAtt OrganizationUnitHandler.Arn
      ParentId: !GetAtt Organization.OrganizationRootId
      OrganizationUnitName: deployment

  OrganizationUnitHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      CodeUri: lambda_codebase/organization_unit
      Description: "ADF Lambda Function - Create Organization Unit"
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "organizations:CreateOrganizationalUnit"
                - "organizations:DeleteOrganizationalUnit"
                - "organizations:ListOrganizationalUnitsForParent"
              Resource: "*"
      FunctionName: OrganizationUnitHandler
    Metadata:
      BuildMethod: python3.12

  DeploymentAccount:
    Type: Custom::Account
    DependsOn: Organization
    Properties:
      ServiceToken: !GetAtt AccountHandler.Arn
      AccountName: !Ref DeploymentAccountName
      AccountEmailAddress: !Ref DeploymentAccountEmailAddress
      CrossAccountAccessRoleName: !Ref CrossAccountAccessRoleName
      ExistingAccountId: !Ref DeploymentAccountId

  AccountHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      CodeUri: lambda_codebase/account
      Description: "ADF Lambda Function - Create Account"
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "organizations:CreateAccount"
                - "organizations:DescribeCreateAccountStatus"
              Resource: "*"
            - Effect: Allow
              Action: ssm:GetParameter
              Resource: !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/deployment_account_id"
      FunctionName: AccountHandler
    Metadata:
      BuildMethod: python3.12

  PipelineCloudWatchEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: adf-bootstrap-execute-cwe
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Sub "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}"

  PipelineCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - "CodeCommit Repository State Change"
        resources:
          - !GetAtt CodeCommitRepository.Arn
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - !GetAtt DetermineDefaultBranchName.DefaultBranchName
      Targets:
        - Arn: !Sub "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}"
          RoleArn: !GetAtt PipelineCloudWatchEventRole.Arn
          Id: adf-codepipeline-trigger-bootstrap

Outputs:
  ADFVersionNumber:
    Value: !FindInMap ["Metadata", "ADF", "Version"]
    Export:
      Name: "ADFVersionNumber"

  CodeCommitHttpURL:
    Description: "The CodeCommit HTTP Url"
    Value: !GetAtt CodeCommitRepository.CloneUrlHttp
    Export:
      Name: "BaseTemplatesRepoHttpURL"

  CodeCommitSshURL:
    Description: "The CodeCommit SSH Url"
    Value: !GetAtt CodeCommitRepository.CloneUrlSsh
    Export:
      Name: "BaseTemplatesRepoSSHURL"
