AWSTemplateFormatVersion: '2010-09-09'
Description: ADF CloudFormation Template For CodePipeline - AWS CodeCommit Source and CodeBuild (No Deployment Steps)
Parameters:
  ProjectName:
    Description: Name of the Project (This is automatically passed in by ADF)
    Type: String
  ScheduleExpression:
    Description: The Schedule expression for this pipeline
    Type: String
    Default: ''
  Image:
    Description: The Image for CodeBuild to use
    Type: String
    Default: "aws/codebuild/python:3.7.1"
  NotificationEndpoint:
    Description: The Email Address / Slack channel notifications will go to for changes related to this pipeline
    Type: String
    Default: ''
  ComputeType:
    Description: The ComputeType for CodeBuild
    Type: String
    Default: "BUILD_GENERAL1_SMALL"
  SourceAccountId:
    Description: The ID of the Source Account that will hold the CodeCommit Repo
    Type: String
  BranchName:
    Description: Name of the CodeCommit Branch you will use to trigger the pipeline
    Type: String
    Default: master
  RestartExecutionOnUpdate:
    Description: If the pipeline will automatically trigger based on update
    Type: String
    Default: False
  S3Bucket{{ deployment_account_region|replace("-", "") }}:
    Description: The S3 Bucket for Cross region deployment for {{ deployment_account_region }}
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cross_region/s3_regional_bucket/{{ deployment_account_region }}
  KMSKey{{ deployment_account_region|replace("-", "") }}:
    Description: The KMSKey Arn for Cross region deployment for {{ deployment_account_region }}
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cross_region/kms_arn/{{ deployment_account_region }}
Conditions:
  HasSchedule: !Not [!Equals [!Ref ScheduleExpression, '']]
Resources:
  CronCloudwatchEventsRule:
    Type: "AWS::Events::Rule"
    Condition: HasSchedule
    Properties: 
      Description: !Sub Triggers ${AWS::StackName} on a Schedule
      ScheduleExpression: !Ref ScheduleExpression
      Targets:
        - Arn: !GetAtt CronLambdaFunction.Arn
          Id: !Sub "adf-cron-${AWS::StackName}"
  CronLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Condition: HasSchedule
    Properties:
      Code:
        ZipFile: !Sub |
          import boto3
          def handler(event, _):
            client = boto3.client('codepipeline', region_name="${AWS::Region}")
            client.start_pipeline_execution(name="${AWS::StackName}")
      Handler: 'index.handler'
      FunctionName: !Sub "adf-cron-pipeline-${AWS::StackName}"
      Description: !Sub "ADF Lambda Function - Cron ${AWS::StackName}"
      MemorySize: 128
      Role: !GetAtt CronLambdaRole.Arn
      Runtime: 'python3.7'
      Timeout: 60
  CronPermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Condition: HasSchedule
    Properties: 
      FunctionName: !Ref CronLambdaFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt CronCloudwatchEventsRule.Arn
  CronLambdaRole:
    Type: "AWS::IAM::Role"
    Condition: HasSchedule
    Properties:
      RoleName: !Sub "adf-cron-lambda-role-${AWS::StackName}"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Policies: 
        - PolicyName: "adf-lambda-execution-role"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Resource: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}"
                Action: 
                  - "codepipeline:StartPipelineExecution"
              - Effect: "Allow"
                Resource: "arn:aws:logs:*:*:*"
                Action: "logs:*"
              - Effect: "Allow"
                Resource: "*"
                Action: 
                  - "lambda:GetAccountSettings"
                  - "lambda:ListFunctions"
                  - "lambda:ListTags"
                  - "lambda:GetFunction"
                  - "lambda:GetEventSourceMapping"
                  - "lambda:ListEventSourceMappings"
                  - "lambda:DeleteEventSourceMapping"
                  - "lambda:UpdateEventSourceMapping"
                  - "lambda:CreateEventSourceMapping"
                  - "iam:ListRoles"
                Condition:
                  StringEquals:
                    lambda:FunctionArn: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:adf-cron-pipeline-${AWS::StackName}"
  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "adf-build-${ProjectName}"
      Description: !Sub "CodeBuild Project ${ProjectName} created by ADF"
      EncryptionKey: !ImportValue KMSArn-{{ deployment_account_region }}
      ServiceRole: !ImportValue CodeBuildRoleArn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: linuxContainer
        ComputeType: !Ref ComputeType
        Image: !Ref Image
        EnvironmentVariables:
          - Name: PYTHONPATH
            Value: './adf-build/shared/python'
          - Name: PROJECT_NAME
            Value: !Ref ProjectName
          - Name: S3_BUCKET_NAME
            Value: !ImportValue S3Bucket-{{ deployment_account_region }}
          - Name: ACCOUNT_ID
            Value: !Ref AWS::AccountId
      Source:
        Type: CODEPIPELINE
      TimeoutInMinutes: 20
      Tags:
        - Key: Name
          Value: !Ref ProjectName
{% if notification_endpoint %}
  PipelineEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "Trigger notifications based on pipeline state changes"
      EventPattern:
        source:
          - "aws.codepipeline"
        detail-type:
          - "CodePipeline Pipeline Execution State Change"
        detail:
          state:
            - "FAILED"
            - "SUCCEEDED"
          pipeline:
            - !Ref Pipeline
      State: "ENABLED"
      Targets:
        - Arn: !Ref PipelineSNSTopic
          Id: !Sub "${AWS::StackName}-pipeline"
{% if "@" in notification_endpoint %}
          InputTransformer:
            InputTemplate: '"The pipeline <pipeline> from account <account> has <state> at <at>."'
            InputPathsMap:
              pipeline: "$.detail.pipeline"
              state: "$.detail.state"
              at: "$.time"
              account: "$.account"
{% endif %}
  PipelineSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
{% if "@" in notification_endpoint %}
        - Endpoint: !Ref NotificationEndpoint
          Protocol: email
{% else %}
        - Endpoint: !ImportValue SendSlackNotificationLambdaArn
          Protocol: lambda
{% endif %}
  PipelineSNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: !Sub "${AWS::StackName}"
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - events.amazonaws.com
              - codecommit.amazonaws.com
              - sns.amazonaws.com
          Action: sns:Publish
          Resource: "*"
      Topics:
      - !Ref PipelineSNSTopic
  LambdaInvokePermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref PipelineSNSTopic
      FunctionName: 'SendSlackNotification'
{% endif %}
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !ImportValue CodePipelineRoleArn
      Name: !Ref AWS::StackName
      RestartExecutionOnUpdate: !Ref RestartExecutionOnUpdate
      Stages:
        - Name: !Sub Source-${SourceAccountId}
          Actions:
            - Name: CodeCommit
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              Configuration:
                RepositoryName: !Ref ProjectName
                BranchName: !Ref BranchName
              OutputArtifacts:
                - Name: TemplateSource
              RunOrder: 1
              RoleArn: !Sub "arn:aws:iam::${SourceAccountId}:role/adf-codecommit-role" #Source Account
        - Name: Build
          Actions:
          - Name: Build
            ActionTypeId:
              Category: Build
              Owner: AWS
              Version: 1
              Provider: CodeBuild
            Configuration:
              ProjectName: !Sub "adf-build-${ProjectName}"
            RunOrder: 1
            InputArtifacts:
              - Name: TemplateSource
      ArtifactStores:
        - Region: {{ deployment_account_region }}
          ArtifactStore:
            EncryptionKey:
              Id: !Ref KMSKey{{ deployment_account_region|replace("-", "") }}
              Type: KMS
            Location: !Ref S3Bucket{{ deployment_account_region|replace("-", "") }}
            Type: S3
Outputs:
  PipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}
