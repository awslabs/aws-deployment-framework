# // Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# // SPDX-License-Identifier: Apache-2.0

AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: ADF CloudFormation Template (Global) for Deployment Account

Parameters:
  ADFVersion:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: adf_version

  ADFLogLevel:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: adf_log_level

  MasterAccountId:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: master_account_id

  SharedModulesBucket:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: deployment_account_bucket

  OrganizationId:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: organization_id

  CrossAccountAccessRole:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: cross_account_access_role

  Image:
    Description: The Image you wish to use for CodeBuild (defaults to Ubuntu - standard:7.0).
    Type: String
    Default: "aws/codebuild/standard:7.0"

  ComputeType:
    Description: The Compute Type to use for AWS CodeBuild
    Type: String
    # BUILD_GENERAL1_LARGE - For threading with large amounts of pipelines
    # this is the most effective default:
    Default: "BUILD_GENERAL1_LARGE"
    AllowedValues:
      - "BUILD_GENERAL1_SMALL"  # 3 GB memory, 2 vCPU
      - "BUILD_GENERAL1_MEDIUM"  # 7 GB memory, 4 vCPU
      - "BUILD_GENERAL1_LARGE"  # 15 GB memory, 8 vCPU

  NotificationEndpoint:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: notification_endpoint

  NotificationType:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: notification_type

  PipelinePrefix:
    Description: The Prefix that will be attached to pipeline stacks and names for ADF.
    Type: String
    Default: "adf-pipeline-"

  StackPrefix:
    Description: The Prefix that will be attached to stacks deployed via ADF.
    Type: String
    Default: "adf-"

  ADFTerraformExtension:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: /adf/extensions/terraform/enabled

Conditions:
  ADFTerraformExtensionEnabled:
    !Equals [!Ref ADFTerraformExtension, "True"]

Globals:
  Function:
    CodeUri: lambda_codebase
    Runtime: python3.10

Resources:
  LambdaLayerVersion:
    Type: "AWS::Serverless::LayerVersion"
    Properties:
      ContentUri: "../../adf-build/shared/"
      CompatibleRuntimes:
        - python3.10
      Description: "Shared Lambda Layer between master and deployment account"
      LayerName: shared_layer

  LambdaLayerVersionPermission:
    Type: "AWS::Lambda::LayerVersionPermission"
    Properties:
      Action: lambda:GetLayerVersion
      LayerVersionArn: !Ref LambdaLayerVersion
      OrganizationId: !Ref OrganizationId
      Principal: "*"

  KMSKey:
    Type: AWS::KMS::Key
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Description: Used by Assumed Roles in Accounts accounts to Encrypt/Decrypt code
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Id: !Ref AWS::StackName
        Statement:
          - Sid: Allows admin of the key
            Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action:
              - "kms:CancelKeyDeletion"
              - "kms:Create*"
              - "kms:Decrypt"
              - "kms:Delete*"
              - "kms:Describe*"
              - "kms:DescribeKey"
              - "kms:Disable*"
              - "kms:Enable*"
              - "kms:Encrypt"
              - "kms:GenerateDataKey*"
              - "kms:Get*"
              - "kms:List*"
              - "kms:Put*"
              - "kms:ReEncrypt*"
              - "kms:Revoke*"
              - "kms:ScheduleKeyDeletion"
              - "kms:Update*"
            Resource: "*"
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource: "*"
            Condition:
              StringEquals:
                aws:PrincipalOrgID: !Ref OrganizationId
          - Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
            Effect: Allow
            Principal:
              Service:
                - sns.amazonaws.com
                - events.amazonaws.com
                - codecommit.amazonaws.com
            Resource: "*"

  KMSAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/codepipeline-${AWS::AccountId}"
      TargetKeyId: !Ref KMSKey

  PipelineBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AccessControl: BucketOwnerFullControl
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  PipelineManagementApplication:
    Type: AWS::Serverless::Application
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      Location: pipeline_management.yml
      Parameters:
        LambdaLayer: !Ref LambdaLayerVersion
        ADFVersion: !Ref ADFVersion
        OrganizationId: !Ref OrganizationId
        CrossAccountAccessRole: !Ref CrossAccountAccessRole
        PipelineBucket: !Ref PipelineBucket
        RootAccountId: !Ref MasterAccountId
        CodeBuildImage: !Ref Image
        CodeBuildComputeType: !Ref ComputeType
        SharedModulesBucket: !Ref SharedModulesBucket
        PipelinePrefix: !Ref PipelinePrefix
        StackPrefix: !Ref StackPrefix
        ADFLogLevel: !Ref ADFLogLevel

  CodeCommitRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "adf-codecommit-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt CodePipelineRole.Arn
            Action:
              - sts:AssumeRole
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  CodeCommitPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "adf-codecommit-role-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "codecommit:BatchGetRepositories"
              - "codecommit:CancelUploadArchive"
              - "codecommit:Get*"
              - "codecommit:GitPull"
              - "codecommit:List*"
              - "codecommit:UploadArchive"
              - "codepipeline:StartPipelineExecution"
              - "events:PutEvents"
              - "s3:Get*"
              - "s3:List*"
              - "s3:Put*"
            Resource: "*"
          - Effect: Allow
            Action:
              - "kms:Decrypt"
              - "kms:Describe*"
              - "kms:DescribeKey"
              - "kms:Encrypt"
              - "kms:GenerateDataKey*"
              - "kms:Get*"
              - "kms:List*"
              - "kms:ReEncrypt*"
            Resource: !GetAtt KMSKey.Arn
      Roles:
        - !Ref CodeCommitRole

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "adf-codebuild-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole

  CodeBuildRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "adf-codebuild-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Sid: "DynamoDB"
            Action:
              - dynamodb:PutItem
              - dynamodb:GetItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
            Resource:
              - !Sub "arn:${AWS::Partition}:dynamodb:*:${AWS::AccountId}:table/adf-tflocktable*"
          - Effect: Allow
            Sid: "S3"
            Action:
              - s3:Get*
              - s3:GetBucketPolicy
              - s3:List*
              - s3:PutObject
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${PipelineBucket}
              - !Sub arn:${AWS::Partition}:s3:::${PipelineBucket}/*
          - Effect: Allow
            Sid: "S3ReadOnly"
            Action:
              - s3:Get*
              - s3:GetBucketPolicy
              - s3:List*
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${SharedModulesBucket}
              - !Sub arn:${AWS::Partition}:s3:::${SharedModulesBucket}/*
              - !Sub arn:${AWS::Partition}:s3:::${PipelineManagementApplication.Outputs.DefinitionBucket}
              - !Sub arn:${AWS::Partition}:s3:::${PipelineManagementApplication.Outputs.DefinitionBucket}/*
          - Effect: Allow
            Sid: "KMS"
            Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource: !GetAtt KMSKey.Arn
          - Effect: Allow
            Action:
              - "organizations:DescribeOrganization"
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Resource:
              - "*"
          - Effect: Allow
            Condition:
              StringEquals:
                aws:PrincipalOrgID: !Ref OrganizationId
            Action:
              - "secretsmanager:Get*"
            Resource:
              # Only allow CodeBuild access to secrets that start with /adf/*
              - !Sub "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/adf/*"
          - Effect: Allow
            Action:
              - "ssm:GetParameter"
              - "ssm:GetParameters"
            Resource:
              - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*
              - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}::parameter/aws/service/*
          - Effect: Deny
            Action:
              - "sts:AssumeRole"
            Resource:
              - !GetAtt CloudFormationDeploymentRole.Arn
              - !Sub arn:${AWS::Partition}:iam::${MasterAccountId}:role/${CrossAccountAccessRole}
          - Effect: Allow
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource:
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
          - Effect: Allow
            Action:  # If you plan on building docker images in CodeBuild you need these
              - "ecr:GetAuthorizationToken"
              - "ecr:InitiateLayerUpload"
              - "ecr:UploadLayerPart"
              - "ecr:CompleteLayerUpload"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:PutImage"
            Resource:
              - "*"
          - Effect: Allow
            Sid: "CodeBuildVPC"
            Action:
              - "ec2:CreateNetworkInterface"
              - "ec2:DescribeDhcpOptions"
              - "ec2:DescribeNetworkInterfaces"
              - "ec2:DeleteNetworkInterface"
              - "ec2:DescribeSubnets"
              - "ec2:DescribeSecurityGroups"
              - "ec2:DescribeVpcs"
            Resource:
              - "*"
          - Effect: Allow
            Sid: "CodeBuildENI"
            Action:
              - "ec2:CreateNetworkInterfacePermission"
            Resource:
              - "*"
            Condition:
              StringEquals:
                ec2:AuthorizedService: "codebuild.amazonaws.com"
      Roles:
        - !Ref CodeBuildRole

  PipelineGenerationProvisionerCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/adf-automation/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole

  PipelineGenerationProvisionerCodeBuildRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "adf-pipeline-generation-provisioner-codebuild-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Sid: "S3"
            Action:
              - s3:Get*
              - s3:GetBucketPolicy
              - s3:List*
              - s3:PutObject
              - s3:DeleteObject
              - s3:DeleteObjectVersion
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${PipelineManagementApplication.Outputs.Bucket}
              - !Sub arn:${AWS::Partition}:s3:::${PipelineManagementApplication.Outputs.Bucket}/*
          - Effect: Allow
            Sid: "S3ReadOnly"
            Action:
              - s3:Get*
              - s3:GetBucketPolicy
              - s3:List*
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${SharedModulesBucket}
              - !Sub arn:${AWS::Partition}:s3:::${SharedModulesBucket}/*
          - Effect: Allow
            Sid: "KMS"
            Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource: !GetAtt KMSKey.Arn
          - Effect: Allow
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource:
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
          - Effect: Allow
            Sid: "DescripePipelineTrigger"
            Action:
              - "codepipeline:ListPipelineExecutions"
            Resource:
              - !Sub arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:aws-deployment-framework-pipelines
      Roles:
        - !Ref PipelineGenerationProvisionerCodeBuildRole

  CloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "adf-cloudformation-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt CodePipelineRole.Arn
            Action:
              - sts:AssumeRole
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  CloudFormationPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "adf-cloudformation-role-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Sid: "CloudFormation"
            Action:
              - cloudformation:*
              - iam:PassRole
              - s3:Get*
              - s3:List*
              - s3:Put*
            Resource: "*"
      Roles:
        - !Ref CloudFormationRole
  CloudFormationPolicyKMS:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "adf-cloudformation-role-policy-kms"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Sid: "KMS"
            Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource: !GetAtt KMSKey.Arn
      Roles:
        - !Ref CloudFormationRole

  CloudFormationDeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "adf-cloudformation-deployment-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS: !GetAtt CodeBuildRole.Arn
            Action:
              - sts:AssumeRole
      Path: /

  AdfAutomationRole:
    # This role is used by CodeBuild on the Deployment Account when
    # creating new CodePipeline Pipelines.
    # This role is not assumed # by CodeBuild in any other pipeline
    # other than 'aws-deployment-framework-pipelines'
    Type: AWS::IAM::Role
    Properties:
      RoleName: "adf-automation-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Sid: "AssumeRole"
            Condition:
              ArnEquals:
                "aws:PrincipalArn":
                  - !GetAtt PipelineManagementApplication.Outputs.CreateRepositoryLambdaRoleArn
                  - !GetAtt PipelineManagementApplication.Outputs.CreateOrUpdateRuleLambdaRoleArn
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action:
              - sts:AssumeRole
      Path: /

  CloudFormationDeploymentPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "adf-cloudformation-deployment-role-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Sid: "KMS"
            Action:  # These are required for cross account deployments via CodePipeline.
              - "kms:Decrypt"
              - "kms:DescribeKey"
              - "kms:Encrypt"
              - "kms:GenerateDataKey*"
              - "kms:ReEncrypt*"
            Resource: !GetAtt KMSKey.Arn
      Roles:
        - !Ref CloudFormationDeploymentRole

  AdfAutomationRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "adf-automation-role-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Sid: "S3"
            Action:
              - s3:Get*
              - s3:List*
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${PipelineBucket}/adf-build/templates/*"
          - Effect: Allow
            Sid: "CloudFormation"
            Action:
              - "cloudformation:CancelUpdateStack"
              - "cloudformation:ContinueUpdateRollback"
              - "cloudformation:CreateChangeSet"
              - "cloudformation:CreateStack"
              - "cloudformation:DeleteChangeSet"
              - "cloudformation:DeleteStack"
              - "cloudformation:DescribeChangeSet"
              - "cloudformation:DescribeStacks"
              - "cloudformation:ExecuteChangeSet"
              - "cloudformation:SetStackPolicy"
              - "cloudformation:SignalResource"
              - "cloudformation:UpdateStack"
              - "cloudformation:UpdateTerminationProtection"
            Resource:
              - !Sub "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/adf-codecommit-*/*"
              - !Sub "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/adf-event-rule-${AWS::AccountId}-*/*"
          - Effect: Allow
            Sid: "CodeCommit"
            Action:
              - "codecommit:CreateRepository"
              - "codecommit:UpdateRepositoryDescription"
              - "codecommit:PutRepositoryTriggers"
              - "codecommit:GetRepository"
              - "codecommit:TagResource"
              - "codecommit:UntagResource"
            Resource:
              - "*"
          - Effect: Allow
            Sid: "Events"
            Action:
              - "events:DescribeRule"
              - "events:EnableRule"
              - "events:ListRules"
              - "events:PutEvents"
              - "events:PutRule"
              - "events:PutTargets"
              - "cloudformation:ValidateTemplate"
            Resource:
              - "*"
          - Effect: Allow
            Sid: "SSM"
            Action:
              - "ssm:GetParameters"
              - "ssm:GetParameter"
            Resource:
              - !Sub "arn:${AWS::Partition}:ssm:*:*:parameter/bucket_name"
              - !Sub "arn:${AWS::Partition}:ssm:*:*:parameter/deployment_account_id"
              - !Sub "arn:${AWS::Partition}:ssm:*:*:parameter/kms_arn"
      Roles:
        - !Ref AdfAutomationRole

  CodeCommitRepository:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: "aws-deployment-framework-pipelines"
      RepositoryDescription: !Sub "CodeCommit Repo for all pipelines in ${AWS::AccountId}"
      Triggers:
        - Name: Email
          DestinationArn: !Ref PipelineSNSTopic
          Branches:
            - master
            - main
          Events:
            - all

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: !Ref Image
        EnvironmentVariables:
          - Name: PYTHONPATH
            Value: "./adf-build/:./adf-build/python/"
          - Name: ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: SHARED_MODULES_BUCKET
            Value: !Ref SharedModulesBucket
          - Name: ADF_PIPELINES_BUCKET
            Value: !GetAtt PipelineManagementApplication.Outputs.Bucket
          - Name: ADF_LOG_LEVEL
            Value: INFO
          - Name: ADF_VERSION
            Value: !Ref ADFVersion
        Type: LINUX_CONTAINER
      Name: "aws-deployment-framework-base"
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.11
                nodejs: 18
              commands:
                - aws s3 cp s3://$SHARED_MODULES_BUCKET/adf-build/ ./adf-build/ --recursive --quiet
                - pip install -r adf-build/requirements.txt -r adf-build/helpers/requirements.txt -q -t ./adf-build
            pre_build:
              commands:
                - mkdir -p deployment_maps
            build:
              commands:
                - python adf-build/helpers/describe_codepipeline_trigger.py --should-match StartPipelineExecution aws-deployment-framework-pipelines ${!CODEPIPELINE_EXECUTION_ID} && EXTRA_OPTS="--force" || EXTRA_OPTS=""
                - python adf-build/helpers/sync_to_s3.py ${!EXTRA_OPTS} --delete --metadata adf_version=${!ADF_VERSION} --upload-with-metadata execution_id=${!CODEPIPELINE_EXECUTION_ID} deployment_map.yml s3://$ADF_PIPELINES_BUCKET/deployment_map.yml
                - python adf-build/helpers/sync_to_s3.py ${!EXTRA_OPTS} --delete --extension .yml --extension .yaml  --metadata adf_version=${!ADF_VERSION} --upload-with-metadata execution_id=${!CODEPIPELINE_EXECUTION_ID} --recursive deployment_maps s3://$ADF_PIPELINES_BUCKET/deployment_maps
            post_build:
              commands:
                - echo "Pipelines are updated in the AWS Step Functions ADFPipelineManagementStateMachine."
                - echo "Please track their progress via:"
                - echo "https://${AWS::Region}.console.aws.amazon.com/states/home?region=${AWS::Region}#/statemachines/view/arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:ADFPipelineManagementStateMachine"
      ServiceRole: !GetAtt PipelineGenerationProvisionerCodeBuildRole.Arn
      Tags:
        - Key: "Name"
          Value: "aws-deployment-framework-base"

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineBucket
      RoleArn: !GetAtt CodePipelineRole.Arn
      RestartExecutionOnUpdate: true
      Name: "aws-deployment-framework-pipelines"
      Stages:
        - Name: CodeCommit
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: CodeCommit
              OutputArtifacts:
                - Name: "Source"
              Configuration:
                BranchName: !GetAtt DetermineDefaultBranchName.DefaultBranchName
                RepositoryName: !GetAtt CodeCommitRepository.Name
                PollForSourceChanges: false
              RunOrder: 1
        - Name: KickoffCreateOrUpdatePipelines
          Actions:
            - Name: CreateOrUpdate
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              OutputArtifacts:
                - Name: "aws-deployment-pipelines-build"
              InputArtifacts:
                - Name: "Source"
              Configuration:
                ProjectName: !Ref CodeBuildProject
                EnvironmentVariables: >-
                  [
                    {
                      "name": "CODEPIPELINE_EXECUTION_ID",
                      "value": "#{codepipeline.PipelineExecutionId}",
                      "type": "PLAINTEXT"
                    }
                  ]
              RunOrder: 1

  PipelineSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      KmsMasterKeyId: "alias/aws/sns"
      Subscription:
        - Endpoint: !Ref NotificationEndpoint
          Protocol: !Ref NotificationType

  PipelineEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "Trigger notifications based on pipeline state changes"
      EventPattern:
        source:
          - "aws.codepipeline"
        detail-type:
          - "CodePipeline Pipeline Execution State Change"
        detail:
          state:
            - "FAILED"
            - "SUCCEEDED"
          pipeline:
            - !Ref CodePipeline
      State: "ENABLED"
      Targets:
        - Arn: !Ref PipelineSNSTopic
          Id: !Sub "${AWS::StackName}"
          InputTransformer:
            InputTemplate: '"The pipeline <pipeline> from account <account> has <state> at <at>."'
            InputPathsMap:
              pipeline: "$.detail.pipeline"
              state: "$.detail.state"
              at: "$.time"
              account: "$.account"

  PipelineSNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: !Sub "${AWS::StackName}"
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codecommit.amazonaws.com
                - events.amazonaws.com
                - states.amazonaws.com
            Action: sns:Publish
            Resource: "*"
      Topics:
        - !Ref PipelineSNSTopic

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "adf-codepipeline-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
                - codedeploy.amazonaws.com
                - codepipeline.amazonaws.com
                - s3.amazonaws.com
            Action:
              - sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS: !Ref AWS::AccountId
            Action:
              - sts:AssumeRole

  CodePipelineRolePolicy:
    # See https://docs.aws.amazon.com/codepipeline/latest/userguide/how-to-custom-role.html#how-to-update-role-new-services
    Type: AWS::IAM::Policy
    DependsOn: PipelineBucketPolicy
    Properties:
      PolicyName: "adf-codepipeline-role-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Sid: "CodePipeline"
            Action:
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
              - cloudformation:UpdateStack
              - cloudformation:CreateChangeSet
              - cloudformation:DeleteChangeSet
              - cloudformation:DescribeChangeSet
              - cloudformation:ExecuteChangeSet
              - cloudformation:SetStackPolicy
              - cloudformation:ValidateTemplate
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
              - ecr:DescribeImages
              - ecs:DescribeServices
              - ecs:DescribeTaskDefinition
              - ecs:DescribeTasks
              - ecs:ListTasks
              - ecs:RegisterTaskDefinition
              - ecs:UpdateService
              - codedeploy:CreateDeployment
              - codedeploy:GetApplicationRevision
              - codedeploy:GetDeployment
              - codedeploy:GetDeploymentConfig
              - codedeploy:RegisterApplicationRevision
              - lambda:InvokeFunction
              - lambda:ListFunctions
              - s3:GetObjectVersion
              - s3:GetObjectVersionAcl
              - s3:GetObjectVersionTagging
              - s3:GetReplicationConfiguration
              - s3:ListBucket
              - s3:ReplicateDelete
              - s3:ReplicateObject
              - s3:ReplicateTags
              - servicecatalog:CreateProvisioningArtifact
              - servicecatalog:DeleteProvisioningArtifact
              - servicecatalog:DescribeProvisioningArtifact
              - servicecatalog:ListProvisioningArtifacts
              - servicecatalog:UpdateProduct
              - sns:Publish
            Resource:
              - "*"
          - Effect: Allow
            Sid: "CodeCommit"
            Action:
              - codecommit:GetBranch
              - codecommit:GetCommit
              - codecommit:UploadArchive
              - codecommit:GetUploadArchiveStatus
              - codecommit:CancelUploadArchive
            Resource:
              - "*"
          - Effect: Allow
            Sid: "PassRole"
            Action:
              - "iam:PassRole"
            Resource: "*"
            Condition:
              StringEqualsIfExists:
                "iam:PassedToService":
                  - cloudformation.amazonaws.com
                  - elasticbeanstalk.amazonaws.com
                  - ec2.amazonaws.com
                  - ecs-tasks.amazonaws.com
          - Effect: Allow
            Sid: "AllowCodeStarConnections"
            Action:
              - "codestar-connections:GetConnection"
              - "codestar-connections:GetHost"
              - "codestar-connections:ListConnections"
              - "codestar-connections:ListHosts"
              - "codestar-connections:PassConnection"
              - "codestar-connections:UseConnection"
            Resource: "*"
      Roles:
        - !Ref CodePipelineRole

  CodePipelineRolePolicyKMS:
    Type: AWS::IAM::Policy
    DependsOn: PipelineBucketPolicy
    Properties:
      PolicyName: "adf-codepipeline-role-policy-kms"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Sid: "KMS"
            Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource: !GetAtt KMSKey.Arn
      Roles:
        - !Ref CodePipelineRole

  CodePipelineRolePolicySTS:
    Type: AWS::IAM::Policy
    DependsOn: PipelineBucketPolicy
    Properties:
      PolicyName: "adf-codepipeline-role-policy-sts"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Sid: "AssumeRole"
            Action:
              - sts:AssumeRole
            Resource:
              - !Sub arn:${AWS::Partition}:iam::*:role/adf-cloudformation-role
              - !Sub arn:${AWS::Partition}:iam::*:role/adf-codecommit-role
            Condition:
              StringEquals:
                aws:PrincipalOrgID: !Ref OrganizationId
      Roles:
        - !Ref CodePipelineRole

  CodePipelineRolePolicyS3:
    Type: AWS::IAM::Policy
    DependsOn: PipelineBucketPolicy
    Properties:
      PolicyName: "adf-codepipeline-role-policy-s3"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Sid: "S3"
            Action:
              - s3:Get*
              - s3:List*
              - s3:Put*
              - s3:ReplicateDelete
              - s3:ReplicateObject
              - s3:ReplicateTags
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${PipelineBucket}
              - !Sub arn:${AWS::Partition}:s3:::${PipelineBucket}/*
      Roles:
        - !Ref CodePipelineRole

  PipelineBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref "PipelineBucket"
      PolicyDocument:
        Statement:
          - Action:
              - "s3:Get*"
              - "s3:List*"
              - "s3:PutObject*"
              - "s3:PutReplicationConfiguration"
            Effect: Allow
            Condition:
              StringEquals:
                aws:PrincipalOrgID: !Ref OrganizationId
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${PipelineBucket}
              - !Sub arn:${AWS::Partition}:s3:::${PipelineBucket}/*
            Principal:
              AWS: "*"

  SendSlackNotification:
    Type: "AWS::Serverless::Function"
    Properties:
      Layers:
        - !Ref LambdaLayerVersion
      Description: "ADF Lambda Function - Send Slack Notification"
      FunctionName: SendSlackNotification
      Handler: slack.lambda_handler
      Role: !GetAtt SendSlackNotificationLambdaRole.Arn
      Environment:
        Variables:
          ADF_PIPELINE_PREFIX: !Ref PipelinePrefix
          ADF_LOG_LEVEL: !Ref ADFLogLevel
      Timeout: 10

  EnableCrossAccountAccess:
    Type: "AWS::Serverless::Function"
    Properties:
      Layers:
        - !Ref LambdaLayerVersion
      Description: "ADF Lambda Function - EnableCrossAccountAccess"
      MemorySize: 1024
      Environment:
        Variables:
          KMS_KEY_ID: !Ref KMSKey
          S3_BUCKET_NAME: !Ref PipelineBucket
          ADF_LOG_LEVEL: !Ref ADFLogLevel
          DEPLOYMENT_ACCOUNT_ID: !Ref AWS::AccountId
      FunctionName: UpdateCrossAccountIAM
      Handler: enable_cross_account_access.lambda_handler
      Role: !GetAtt EnableCrossAccountAccessLambdaRole.Arn
      Timeout: 900

  CheckPipelineStatus:
    Type: "AWS::Serverless::Function"
    Properties:
      Layers:
        - !Ref LambdaLayerVersion
      Description: "ADF Lambda Function - CheckPipelineStatus"
      Environment:
        Variables:
          KMS_KEY_ID: !Ref KMSKey
          S3_BUCKET_NAME: !Ref PipelineBucket
          ADF_LOG_LEVEL: !Ref ADFLogLevel
      FunctionName: CheckPipelineStatus
      Handler: update_pipelines.lambda_handler
      Role: !GetAtt CheckPipelineStatusLambdaRole.Arn
      Timeout: 120

  SendSlackNotificationLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "adf-send-slack-notification-lambda-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "adf-send-slack-notification"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ssm:GetParameter"
                Resource:
                  - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/notification_endpoint/*"
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                Resource:
                  # Only allow Lambda access to get secrets that start with /adf/*
                  - !Sub "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/adf/slack/*"

  CheckPipelineStatusLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "adf-check-pipeline-status-lambda-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "adf-check-pipeline-status"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "codepipeline:GetPipelineState"
                  - "codepipeline:StartPipelineExecution"
                Resource:
                  - !Sub "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}"

  EnableCrossAccountAccessLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "adf-enable-cross-account-access-lambda-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "adf-enable-cross-account-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sts:AssumeRole"
                Resource:
                  - !Sub "arn:${AWS::Partition}:iam::*:role/adf-update-cross-account-access-role"
                Condition:
                  StringEquals:
                    aws:PrincipalOrgID: !Ref OrganizationId
              - Effect: Allow
                Action:
                  - "ssm:GetParameter"
                Resource:
                  - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cross_region/kms_arn/*"
                  - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cross_region/s3_regional_bucket/*"
              - Effect: Allow
                Action:
                  - "codepipeline:GetPipelineState"
                  - "codepipeline:StartPipelineExecution"
                Resource:
                  - !Sub "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}"
              - Effect: Allow
                Action:
                  - "iam:GetRolePolicy"
                  - "iam:PutRolePolicy"
                Resource:
                  - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/adf-codepipeline-role"
                  - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/adf-cloudformation-deployment-role"
                  - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/adf-cloudformation-role"

  LambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "adf-lambda-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "lambda:GetLayerVersion"
            Resource:
              - !Ref LambdaLayerVersion
          - Effect: Allow
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: '*'
      Roles:
        - !Ref SendSlackNotificationLambdaRole
        - !Ref CheckPipelineStatusLambdaRole
        - !Ref EnableCrossAccountAccessLambdaRole

  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "adf-state-machine-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - states.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "adf-state-machine-role"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                  - "sns:Publish"
                Resource:
                  - !GetAtt EnableCrossAccountAccess.Arn
                  - !GetAtt CheckPipelineStatus.Arn
                  - !GetAtt PipelineSNSTopic.TopicArn

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref PipelineSNSTopic
      FunctionName: !Ref SendSlackNotification

  StateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: "EnableCrossAccountAccess"
      RoleArn: !GetAtt StatesExecutionRole.Arn
      TracingConfiguration:
        Enabled: true
      DefinitionString: !Sub |-
        {
          "Comment": "Enable Cross Account Access from Deployment Account",
          "StartAt": "DetermineEvent",
          "States": {
            "DetermineEvent": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.update_only",
                  "NumericEquals": 1,
                  "Next": "UpdateDeploymentPipelines"
                }, {
                  "Not": {
                    "Variable": "$.error",
                    "NumericEquals": 0
                  },
                  "Next": "NotifyFailure"
                }
              ],
              "Default": "EnableCrossAccountAccessMap"
            },
            "EnableCrossAccountAccessMap": {
              "Type": "Map",
              "Next": "UpdateDeploymentPipelines",
              "Iterator": {
                "StartAt": "EnableCrossAccountAccess",
                "States": {
                  "EnableCrossAccountAccess": {
                    "Type": "Task",
                    "Resource": "${EnableCrossAccountAccess.Arn}",
                    "TimeoutSeconds": 900,
                    "End": true,
                    "Retry": [
                      {
                        "ErrorEquals": [
                          "States.TaskFailed",
                          "ClientError"
                        ],
                        "BackoffRate": 2,
                        "IntervalSeconds": 2,
                        "MaxAttempts": 10
                      }, {
                        "ErrorEquals": [
                          "Lambda.Unknown",
                          "Lambda.ServiceException",
                          "Lambda.AWSLambdaException",
                          "Lambda.SdkClientException",
                          "Lambda.TooManyRequestsException"
                        ],
                        "IntervalSeconds": 2,
                        "MaxAttempts": 6,
                        "BackoffRate": 2
                      }
                    ]
                  }
                }
              },
              "ItemsPath": "$.account_ids",
              "Parameters": {
                "deployment_account_region.$": "$.deployment_account_region",
                "deployment_account_id.$": "$.deployment_account_id",
                "account_id.$": "$$.Map.Item.Value",
                "regions.$": "$.regions"
              },
              "ResultPath": null
            },
            "UpdateDeploymentPipelines": {
              "Type": "Task",
              "Resource": "${CheckPipelineStatus.Arn}",
              "TimeoutSeconds": 60,
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.TaskFailed"
                  ],
                  "BackoffRate": 1.1,
                  "IntervalSeconds": 1,
                  "MaxAttempts": 10
                }, {
                  "ErrorEquals": [
                    "Lambda.Unknown",
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Next": "NeedToNotifySuccess?"
            },
            "NeedToNotifySuccess?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.update_only",
                  "NumericEquals": 1,
                  "Next": "Success"
                }
              ],
              "Default": "NotifySuccess"
            },
            "Success": {
                "Type": "Succeed"
            },
            "Failure": {
                "Type": "Fail"
            },
            "NotifySuccess": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::sns:publish",
              "Parameters": {
                "TopicArn": "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:${PipelineSNSTopic.TopicName}",
                "Message.$": "$.message",
                "Subject": "Success - AWS Deployment Framework Bootstrap"
              },
              "Next": "Success"
            },
            "NotifyFailure": {
              "Type": "Task",
              "Resource": "arn:${AWS::Partition}:states:::sns:publish",
              "Parameters": {
                "TopicArn": "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:${PipelineSNSTopic.TopicName}",
                "Message.$": "$.error",
                "Subject": "Failure - AWS Deployment Framework Bootstrap"
              },
              "Next": "Failure"
            }
          }
        }

  DetermineDefaultBranchName:
    Type: Custom::DetermineDefaultBranchName
    Properties:
      ServiceToken: !GetAtt DetermineDefaultBranchNameHandler.Arn
      Version: !Ref ADFVersion
      RepositoryArn: !GetAtt CodeCommitRepository.Arn

  DetermineDefaultBranchNameHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      CodeUri: lambda_codebase/determine_default_branch
      Description: "ADF Lambda Function - BootstrapDetermineDefaultBranchName"
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - codecommit:GetRepository
              Resource: !GetAtt CodeCommitRepository.Arn
      FunctionName: ADFPipelinesDetermineDefaultBranchName

  InitialCommit:
    Type: Custom::InitialCommit
    Properties:
      ServiceToken: !GetAtt InitialCommitHandler.Arn
      RepositoryArn: !GetAtt CodeCommitRepository.Arn
      Version: !Ref ADFVersion
      DirectoryName: pipelines_repository
      DefaultBranchName: !GetAtt DetermineDefaultBranchName.DefaultBranchName

  InitialCommitHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.lambda_handler
      CodeUri: lambda_codebase/initial_commit
      Description: "ADF Lambda Function - PipelinesCreateInitialCommitFunction"
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - codecommit:GetDifferences
                - codecommit:CreateCommit
                - codecommit:CreatePullRequest
                - codecommit:DeleteBranch
                - codecommit:GetBranch
                - codecommit:CreateBranch
                - codecommit:CreatePullRequest
                - codecommit:DeleteBranch
              Resource: !GetAtt CodeCommitRepository.Arn
      FunctionName: PipelinesCreateInitialCommitFunction
      Timeout: 300

  KmsKeyArnParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "kms_arn"
      Type: "String"
      Value: !GetAtt KMSKey.Arn

  PipelineCloudWatchEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: adf-pipelines-execute-cwe
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Sub "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}"

  PipelineCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - "CodeCommit Repository State Change"
        resources:
          - !Sub "arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:${CodeCommitRepository.Name}"
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - !GetAtt DetermineDefaultBranchName.DefaultBranchName
      Targets:
        - Arn: !Sub "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}"
          RoleArn: !GetAtt PipelineCloudWatchEventRole.Arn
          Id: adf-codepipeline-trigger-pipeline

  TerraformLockTable:
    Condition: ADFTerraformExtensionEnabled
    Type: "AWS::DynamoDB::Table"
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: LockID
          AttributeType: S
      KeySchema:
        - AttributeName: LockID
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: adf-tflocktable

Outputs:
  ADFVersionNumber:
    Value: !Ref ADFVersion
    Export:
      Name: "ADFVersionNumber"

  SlackLambdaArn:
    Value: !GetAtt SendSlackNotification.Arn
    Export:
      Name: "SendSlackNotificationLambdaArn"

  DeploymentFrameworkRegionalKMSKey:
    Value: !GetAtt KMSKey.Arn
    Export:
      Name: !Sub "KMSArn-${AWS::Region}"

  DeploymentFrameworkRegionalS3Bucket:
    Value: !Ref PipelineBucket
    Export:
      Name: !Sub "S3Bucket-${AWS::Region}"

  CodeBuildRoleArn:
    Value: !GetAtt CodeBuildRole.Arn
    Export:
      Name: "CodeBuildRoleArn"

  CloudformationRoleArn:
    Value: !GetAtt CloudFormationRole.Arn
    Export:
      Name: "CloudFormationRoleArn"

  CloudformationDeploymentRoleArn:
    Value: !GetAtt CloudFormationDeploymentRole.Arn
    Export:
      Name: "CloudFormationDeploymentRoleArn"

  CodeCommitHttpURL:
    Description: "The CodeCommit HTTP Url"
    Value: !GetAtt CodeCommitRepository.CloneUrlHttp
    Export:
      Name: "aws-deployment-framework-pipelines-codecommit-http-url"

  CodeCommitSshURL:
    Description: "The CodeCommit SSH Url"
    Value: !GetAtt CodeCommitRepository.CloneUrlSsh
    Export:
      Name: "aws-deployment-framework-pipelines-codecommit-ssh-url"

  CodePipelineRoleArn:
    Description: "The CodePipeline Arn"
    Value: !GetAtt CodePipelineRole.Arn
    Export:
      Name: "CodePipelineRoleArn"

  KmsKeyArn:
    Description: "The Kms Key Arn"
    Value: !GetAtt KMSKey.Arn
    Export:
      Name: "KmsKeyArn"
