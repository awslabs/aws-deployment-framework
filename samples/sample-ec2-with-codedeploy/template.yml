# // Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# // SPDX-License-Identifier: Apache-2.0

AWSTemplateFormatVersion: '2010-09-09'
Description: ADF CloudFormation Sample Template (EC2 Application with CodeDeploy Components)
Metadata:
  License: Apache-2.0
Parameters:
  CodeDeployAgentInstallScript:
    Type: "String"
    Description: "The S3 Object URL for the installation script of CodeDeploy"
  JavaInstallScript:  # This is an example file that we're install in UserData but could be moved to the AMI creation process
    Type: "String"
    Description: "The S3 Object URL for the Java deps install script"
  ApplicationName:
    Type: "String"
    Description: "The name of our CodeDeploy Application we would like to create"
  Environment:
    Type: "String"
    AllowedValues:
      - "testing"
      - "production"
    Default: "testing"
    ConstraintDescription: "Must be one of the values from the list."
    Description: "Environment in which resources are deployed."
  InstanceMaxSize:
    Type: "String"
    Description: "Maximum number of instances in the auto-scaling group"
  InstanceMinSize:
    Type: "String"
    Description: "Minimum number of instances in the auto-scaling group"
  ImageId:
    Type: "AWS::EC2::Image::Id"
    ConstraintDescription: "Must be a valid AMI id"
    Description: "The AMI id of the EC2 Instance"
  InstanceType:
    Type: "String"
    AllowedValues:
      - "t3.micro"
      - "t3.small"
      - "t3.medium"
    ConstraintDescription: "Must be one of the values from the list."
    Description: "Instance type for the EC2 instances."
  KeyPair:
    Description: "Amazon EC2 Key Pair"
    Type: "AWS::EC2::KeyPair::KeyName"
Resources:
  AutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 0
        MaxBatchSize: 1
        WaitOnResourceSignals: true
        PauseTime: "PT20M"
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
    Properties:
      AvailabilityZones: !GetAZs ""
      MinSize: !Ref "InstanceMinSize"
      MaxSize: !Ref "InstanceMaxSize"
      LaunchConfigurationName: !Ref "LaunchConfiguration"
      MetricsCollection:
        - Granularity: "1Minute"
      TerminationPolicies:
        - "OldestInstance"
      VPCZoneIdentifier:
        - Fn::ImportValue:
            Fn::Sub: ${Environment}-private-subnet-1a
        - Fn::ImportValue:
            Fn::Sub: ${Environment}-private-subnet-1b
        - Fn::ImportValue:
            Fn::Sub: ${Environment}-private-subnet-1c
  CodeDeployApplication:
    Type: "AWS::CodeDeploy::Application"
    Properties:
      ApplicationName: !Ref ApplicationName
  CodeDeployDeploymentGroup:
    Type: "AWS::CodeDeploy::DeploymentGroup"
    Properties:
      ApplicationName: !Ref "CodeDeployApplication"
      AutoRollbackConfiguration:
        Enabled: 'true'
        Events:
          - DEPLOYMENT_FAILURE
      DeploymentGroupName: !Sub "${Environment}-${ApplicationName}"
      DeploymentConfigName: "CodeDeployDefault.OneAtATime"
      ServiceRoleArn: !ImportValue CodeDeployRoleArn
      DeploymentStyle:
        DeploymentOption: WITH_TRAFFIC_CONTROL
      LoadBalancerInfo:
        TargetGroupInfoList:
          - Name: !GetAtt ApplicationLoadBalancerTargetGroup.TargetGroupName
      AutoScalingGroups:
        - !Ref "AutoScalingGroup"
  LaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      AssociatePublicIpAddress: false
      IamInstanceProfile: !ImportValue GlobalInstanceProfileName
      ImageId: !Ref "ImageId"
      InstanceType: !Ref "InstanceType"
      KeyName: !Ref "KeyPair"
      SecurityGroups:
        - !Ref "PrivateSecurityGroup"
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash
          BUCKET_NAME=$(echo ${CodeDeployAgentInstallScript} | sed 's/^.*adf-global-base/adf-global-base/' |sed 's/\/.*//')
          KEY=$(echo ${CodeDeployAgentInstallScript} | sed 's/^.*adf-upload/adf-upload/')
          aws s3api get-object --bucket $BUCKET_NAME --key $KEY /tmp/code_deploy_install.sh

          BUCKET_NAME=$(echo ${JavaInstallScript} | sed 's/^.*adf-global-base/adf-global-base/' |sed 's/\/.*//')
          KEY=$(echo ${JavaInstallScript} | sed 's/^.*adf-upload/adf-upload/')
          aws s3api get-object --bucket $BUCKET_NAME --key $KEY /tmp/java_install.sh

          chmod +x /tmp/java_install.sh
          chmod +x /tmp/code_deploy_install.sh
          /tmp/code_deploy_install.sh
          /tmp/java_install.sh
          /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}

  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Instance
      VpcId:
        Fn::ImportValue:
            Fn::Sub: ${Environment}-vpc-id
  SecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref 'PrivateSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'PublicLoadBalancerSG'
  SecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from self
      GroupId: !Ref 'PrivateSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'PrivateSecurityGroup'
  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId:
        Fn::ImportValue:
            Fn::Sub: ${Environment}-vpc-id
      SecurityGroupIngress:
          # Allow access to ALB from anywhere on the internet
          - CidrIp: 0.0.0.0/0
            IpProtocol: -1
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
          - Fn::ImportValue:
              Fn::Sub: ${Environment}-public-subnet-1a
          - Fn::ImportValue:
              Fn::Sub: ${Environment}-public-subnet-1b
          - Fn::ImportValue:
              Fn::Sub: ${Environment}-public-subnet-1c
      SecurityGroups: 
        - !Ref 'PublicLoadBalancerSG'
  ApplicationLoadBalancerHTTPListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref "ApplicationLoadBalancerTargetGroup"
          Type: "forward"
      LoadBalancerArn: !Ref "PublicLoadBalancer"
      Port: 80
      Protocol: "HTTP"
  ApplicationLoadBalancerTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: !Sub "${Environment}-${ApplicationName}"
      Port: 80
      Protocol: "HTTP"
      HealthCheckPort: "80"
      HealthCheckProtocol: "HTTP"
      HealthCheckPath: "/"
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 4
      Matcher:
        HttpCode: "200"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "5"
      VpcId:
        Fn::ImportValue:
            Fn::Sub: ${Environment}-vpc-id
  ScaleDownCloudWatchAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmActions:
        - !Ref "ScaleDownScalingPolicy"
      AlarmDescription: !Sub "Alarm if average CPU of ${ApplicationName} is too low"
      ComparisonOperator: "LessThanThreshold"
      Dimensions:
        - Name: "AutoScalingGroupName"
          Value: !Ref "AutoScalingGroup"
      EvaluationPeriods: 3
      MetricName: "CPUUtilization"
      Namespace: "AWS/EC2"
      Period: 60
      Statistic: "Average"
      Threshold: 30
  ScaleDownScalingPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref "AutoScalingGroup"
      Cooldown: 900
      PolicyType: "SimpleScaling"
      ScalingAdjustment: -1
  ScaleUpCloudWatchAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmActions:
        - !Ref "ScaleUpScalingPolicy"
      AlarmDescription: !Sub "Alarm if average CPU of ${ApplicationName} is too high"
      ComparisonOperator: "GreaterThanThreshold"
      Dimensions:
        - Name: "AutoScalingGroupName"
          Value: !Ref "AutoScalingGroup"
      EvaluationPeriods: 3
      MetricName: "CPUUtilization"
      Namespace: "AWS/EC2"
      Period: 60
      Statistic: "Average"
      Threshold: 80
  ScaleUpScalingPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref "AutoScalingGroup"
      Cooldown: 300
      PolicyType: "SimpleScaling"
      ScalingAdjustment: 1
Outputs:
  LoadBalancerExternalUrl:
    Description: The url of the external load balancer
    Value: !Join ['', ['http://', !GetAtt 'PublicLoadBalancer.DNSName']]
    Export:
      Name: 'LoadBalancerExternalUrl'